<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Play! | Junda Ong]]></title>
  <link href="http://samwize.github.com/blog/categories/play-/atom.xml" rel="self"/>
  <link href="http://samwize.github.com/"/>
  <updated>2012-10-15T22:47:34+08:00</updated>
  <id>http://samwize.github.com/</id>
  <author>
    <name><![CDATA[Junda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala + Play! Development Guide]]></title>
    <link href="http://samwize.github.com/2012/10/15/scala-plus-play-development-guide/"/>
    <updated>2012-10-15T16:02:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/15/scala-plus-play-development-guide</id>
    <content type="html"><![CDATA[<p>This is a guide on using Typesafe Stack (basically on Scala + Play! Framework).</p>

<p>It covers installation, start a project, setting up Eclipse and Git, then deploying to Heroku.</p>

<!-- more -->


<h2>Installation</h2>

<p>Install the <a href="http://typesafe.com/stack/download">stack</a>.</p>

<pre><code>$ brew install scala sbt maven giter8
</code></pre>

<p><code>sbt</code> is the <a href="http://typesafe.com/technology/sbt">Simple Build Tool</a> for managing Scala project. The sbt-version for this guide is 0.12.0.</p>

<p><code>giter8</code> is for <a href="https://github.com/n8han/giter8">generating template projects</a>.</p>

<p>If you have a 404 error when maven is being installed, you can <code>brew edit maven</code> and <a href="http://stackoverflow.com/questions/12757694/brew-install-maven-404-error">change the URL</a>.</p>

<h2>Create a new project</h2>

<p>Create a new project using <code>giter8</code> templates</p>

<pre><code>$ g8 typesafehub/play-scala
</code></pre>

<h2>Run the project</h2>

<p>Issue the 2 commands to run</p>

<pre><code>$ sbt
$ run
</code></pre>

<p>The web app will serve at http://localhost:9000/.</p>

<p>You could as well issue a single command <code>sbt run</code>.</p>

<h2>Run a console</h2>

<p>You can also run a play console to do some testing.</p>

<pre><code>$ sbt console
</code></pre>

<p>In the console, you could call any piece of your code directly and conveniently test out stuff.</p>

<h2>Setup Eclipse</h2>

<p>In order to open the project using Eclipse, do a</p>

<pre><code>$ sbt eclipsify
</code></pre>

<p>You would of course download the <a href="http://typesafe.com/stack/scala_ide_download">Scala IDE</a> (Eclipse). I would rename to <code>Eclipse-scala</code> and put in my Applications folder.</p>

<p>Open Eclipse, go to File > Import > General/Existing Project and select the scala project.</p>

<p>Important: Everytime you added libraries and dependencies to the project, you need to <code>sbt eclipsify</code> again.</p>

<h2>Git setup, and .gitignore</h2>

<p>These are the files to ignore; the content of <code>.gitignore</code>:</p>

<pre><code>logs
project/project
project/target
target
tmp
.history
/.settings/
/.target/
/bin/
/eclipse/
/.project
/.classpath
/.cache
/.DS_Store
</code></pre>

<p>Then do <code>git init</code> and your first commit!</p>

<pre><code>git init
git add .
git commit -m "Initial Commit"
</code></pre>

<h2>Scala</h2>

<p>Before the next section on Play! Framework, make sure you are comfortable with Scala first.</p>

<p>Even how much you about Scala being an easy to understand language, and much like Java, trust me. You need to read an introduction guide to Scala first.</p>

<p>A good starting point would be a <a href="/2012/10/07/2012-10-07-a-short-scala-tutorial-for-java-developers/">Scala tutorial</a> from me (:</p>

<h2>Play! Framework</h2>

<p>It's time to start actual development of your app.</p>

<p>However, I am going to cut short here, as this post is merely a short guide to get you started.</p>

<p>Head over to <a href="http://scala.playframework.org/documentation/">Play! framework documentation</a> for a tutorial. (You may skip the setup portion, and start with the <a href="http://scala.playframework.org/documentation/2.0.4/ScalaActions">Action</a>)</p>

<h2>Deploy to Heroku</h2>

<p>Heroku supports Play! 2 and Scala. A <a href="https://github.com/playframework/Play20/wiki/ProductionHeroku">wiki</a> on how to deploy to Heroku is available.</p>

<p>You would firstly need to <a href="http://heroku.com/signup">register</a> a Heroku account, and then install <a href="http://toolbelt.heroku.com/">Toolbelt</a>.</p>

<p>You must have setup git as described in the previous section.</p>

<p>Create a heroku app and push to the server</p>

<pre><code>heroku create
git push heroku master
</code></pre>

<p>It will take quite some time to setup the heroku server on the first push. So wait till it says finish, and off you go!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure your local environment for Scala on Heroku]]></title>
    <link href="http://samwize.github.com/2012/10/09/configure-your-local-environment-for-scala-on-heroku/"/>
    <updated>2012-10-09T00:35:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/09/configure-your-local-environment-for-scala-on-heroku</id>
    <content type="html"><![CDATA[<p>Heroku has a good <a href="https://devcenter.heroku.com/articles/scala">getting started guide with Scala</a>.</p>

<p>If you know the basic of Heroku, and has started with Typesafe's Scala + Play! framework, there is 1 more thing you should to know.</p>

<p>You should know how to properly configure your local development environment.</p>

<!-- more -->


<h2>Add the start script plugin</h2>

<p>Typesafe's <a href="https://github.com/typesafehub/xsbt-start-script-plugin">start script plugin</a> helps to generate a <code>target/start</code> script (you will use later).</p>

<p>Create the file <code>project/build.sbt</code> with this</p>

<pre><code>resolvers += Classpaths.typesafeResolver

addSbtPlugin("com.typesafe.startscript" % "xsbt-start-script-plugin" % "0.5.3")
</code></pre>

<h2>Procfile</h2>

<p>Create the file <code>Procfile</code> in the root folder. Enter this line:</p>

<pre><code>web: target/start Web
</code></pre>

<h2>Build your app locally</h2>

<p>You need to run this EVERYTIME before you run the app</p>

<pre><code>$ sbt clean compile stage
</code></pre>

<h2>Run your app locally</h2>

<p>Run your app using <a href="http://blog.daviddollar.org/2011/05/06/introducing-foreman.html">foreman</a></p>

<pre><code>$ foreman run
</code></pre>

<p>The app will run on port 5000 (instead of usual 9000).</p>

<p>Note: When you change your code, you need to exit, <code>sbt clean compile run</code>, then <code>foreman start</code> again..</p>

<h2>Environment Variables (.env)</h2>

<p>The <code>.env</code> file at root is for storing <a href="https://devcenter.heroku.com/articles/config-vars#local_setup">environment variables</a>. This file is in <code>.gitignore</code>, because it usually contains API credentials or environment specific settings.</p>

<p>For example, credentials for mysql/redis/s3/etc is different between local and production environment.</p>

<p>Enter your local environment variables in <code>.env</code> like this</p>

<pre><code>S3_KEY=mykey
S3_SECRET=mysecret
</code></pre>

<p>Enter your production environment variables using heroku command as such</p>

<pre><code>$ heroku config:add S3_KEY=superkey
$ heroku config:add S3_SECRET=supersecret
</code></pre>

<p>Then in your scala code, you can access the respective environment variables as such:</p>

<p>``` scala</p>

<pre><code>val s3Key = System.getenv("S3_KEY")
</code></pre>

<p>```</p>

<h2>Better way to run your app locally</h2>

<p>You could use <code>.env</code> in your local development workspace as described in the above sections.</p>

<p>However, it would inefficient to <code>sbt clean compile run</code> and then <code>foreman start</code> everytime you change your code and run.</p>

<p>So the better way is to store directly in your computer's environment variables.</p>

<pre><code>$ export S3_KEY=mykey
</code></pre>

<p>To ensure it's stored</p>

<pre><code>$ echo $S3_KEY
</code></pre>

<p>With that, your could <code>sbt run</code> as per normal.</p>
]]></content>
  </entry>
  
</feed>
