<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Junda Ong]]></title>
  <link href="http://samwize.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://samwize.com/"/>
  <updated>2013-07-02T20:51:40+08:00</updated>
  <id>http://samwize.com/</id>
  <author>
    <name><![CDATA[Junda]]></name>
    <email><![CDATA[junda@just2us.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create Async Test with GHUnit]]></title>
    <link href="http://samwize.com/2012/11/25/create-async-test-with-ghunit/"/>
    <updated>2012-11-25T01:44:00+08:00</updated>
    <id>http://samwize.com/2012/11/25/create-async-test-with-ghunit</id>
    <content type="html"><![CDATA[<p>One of the <a href="/2012/10/03/sentestingkit-does-not-support-wait-for-blocks">greatest</a> feature with GHUnit is that it supports unit tests that perform asynchronous stuff.</p>

<p>The <a href="http://gabriel.github.com/gh-unit/docs/appledoc_include/guide_testing.html">ExampleAsyncTest</a> from GHUnit documentation provides a glimpse of what you need to do. However, it still lacks warning you on the <a href="http://stackoverflow.com/questions/7613761/why-does-a-false-assertion-in-async-test-in-ghunit-crash-the-app-instead-of-just">common pitfalls</a>.</p>

<p>This is step by step of how you can use GHUnit async test:</p>

<!-- more -->


<h2>Subclass GHAsyncTestCase instead</h2>

<p>Change the interface class to use <code>GHAsyncTestCase</code>.</p>

<p>``` objc</p>

<pre><code>@interface ExampleAsyncTest : GHAsyncTestCase { }
@end
</code></pre>

<p>```</p>

<h2>Prepare and wait</h2>

<p>Setup the test method with the asynchronous/block call like this:</p>

<p>``` objc
- (void)testAsync {</p>

<pre><code>// Prepare asynchronous action
[self prepare];

// The method call with block
static NSArray *_objects;
[Query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
    // IMPORTANT: Do not call any assert here
    // If you want, do it after waitForStatus
    // GHAssertEquals(...) will crash!

    // Instead, we assign to a static var for testing later
    _objects = objects;

    // Notify that block method has completed
    [self notify:kGHUnitWaitStatusSuccess forSelector:@selector(testObjectRelationships)];
}];

// Wait for block to finish, or timeout
[self waitForStatus:kGHUnitWaitStatusSuccess timeout:10.0];

// Do asserts here instead
GHAssertEquals(99U, [_objects count], nil);
</code></pre>

<p>}
```</p>

<h2>Pitfall: Assert in block</h2>

<p>It is <a href="http://stackoverflow.com/questions/7613761/why-does-a-false-assertion-in-async-test-in-ghunit-crash-the-app-instead-of-just">common</a> that you assert within the block.</p>

<p>But that will just give the following exception when the test fails.</p>

<pre><code>Terminating app due to uncaught exception 'GHTestFailureException', reason: ...
</code></pre>

<p>To make it work, you don't call any asserts within the block.</p>

<p>Leave it until <code>waitForStatus</code> is unblocked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SenTestingKit does not support wait for blocks]]></title>
    <link href="http://samwize.com/2012/10/03/sentestingkit-does-not-support-wait-for-blocks/"/>
    <updated>2012-10-03T00:21:00+08:00</updated>
    <id>http://samwize.com/2012/10/03/sentestingkit-does-not-support-wait-for-blocks</id>
    <content type="html"><![CDATA[<p>I was using <a href="http://developer.apple.com/library/mac/#documentation/developertools/Conceptual/UnitTesting/00-About_Unit_Testing/about.html">SenTestingKit</a>, the default unit testing framework from Apple, when I found out that it does not support tests that involve asynchronous methods, or blocks.</p>

<p>That's a waste.</p>

<!-- more -->


<p>Though there is <a href="https://gist.github.com/2254570">a workaround</a> using semaphore.</p>

<p>``` objc
- (void)testBlockMethod {</p>

<pre><code>dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);    

// Your block method eg. AFNetworking
NSURL *url = [NSURL URLWithString:@"http://httpbin.org/ip"];
NSURLRequest *request = [NSURLRequest requestWithURL:url];
AFJSONRequestOperation *operation = [AFJSONRequestOperation JSONRequestOperationWithRequest:request success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
    NSLog(@"IP Address: %@", [JSON valueForKeyPath:@"origin"]);
    STAssertNotNil(JSON, @"JSON not loaded");
    // Signal that block has completed
    dispatch_semaphore_signal(semaphore);        
} failure:nil];
[operation start];

// Run loop
while (dispatch_semaphore_wait(semaphore, DISPATCH_TIME_NOW))
    [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode
                             beforeDate:[NSDate dateWithTimeIntervalSinceNow:10]];
dispatch_release(semaphore);    
</code></pre>

<p>}
```</p>

<p>But if you mind, there are lots of <a href="http://stackoverflow.com/questions/4114083/ios-tests-specs-tdd-bdd-and-integration-acceptance-testing">other testing frameworks</a>, eg <a href="https://github.com/gabriel/gh-unit">GHUnit</a> supports asynchronous testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Tests with CocoaPods]]></title>
    <link href="http://samwize.com/2012/10/01/unit-tests-with-cocoapods/"/>
    <updated>2012-10-01T23:41:00+08:00</updated>
    <id>http://samwize.com/2012/10/01/unit-tests-with-cocoapods</id>
    <content type="html"><![CDATA[<p><a href="http://cocoapods.org/">CocoaPods</a> is a tool for managing dependecies for iOS and Mac OS X projects.</p>

<p><a href="http://cocoapods.org/">Getting started</a> with using CocoaPods is easy. The tricky part is getting used to opening Xcode workspace (eg. <code>App.xcworkspace</code>) instead of Xocde project. But that's not what I want to covered in this post.</p>

<p>One of the hurdle I encountered is getting unit testing to work after CocoaPods is setup.</p>

<!-- more -->


<p>Apparently, after you setup CocoaPods, it automatically configures your project's main target to use the pods (dependecies). However, it does not configure the same for your unit tests target. So when you run your unit test, you will likely encounter errors like this:</p>

<pre><code>SomeLibrary.h not found
</code></pre>

<p>To fix, go to <strong>Project</strong> > <strong>Info</strong> > <strong>Configurations</strong> > change <code>Based on Configuration File</code> to <code>Pods</code>. Like this:</p>

<p><img class="center" src="/images/cocoapods-unit-test-configure.png"></p>
]]></content>
  </entry>
  
</feed>
