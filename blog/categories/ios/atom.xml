<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Junda Ong]]></title>
  <link href="http://samwize.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://samwize.com/"/>
  <updated>2013-04-17T02:59:59+08:00</updated>
  <id>http://samwize.com/</id>
  <author>
    <name><![CDATA[Junda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to run iOS 4.3 Simulator on Mountain Lion?]]></title>
    <link href="http://samwize.com/2013/03/29/how-to-run-ios-4-dot-3-simulator-on-mountain-lion/"/>
    <updated>2013-03-29T15:23:00+08:00</updated>
    <id>http://samwize.com/2013/03/29/how-to-run-ios-4-dot-3-simulator-on-mountain-lion</id>
    <content type="html"><![CDATA[<p>You can't.</p>

<p>This is a <a href="http://stackoverflow.com/questions/11651773/install-simulator-sdk-4-3-to-xcode-4-4-on-mountain-lion">Mountain Lion issue</a>. Apple somehow broke it, and so even if you manage to download and install the simulator, you can't run it.</p>

<p>Apple recommend you to test on a real device.</p>

<p>I'm sorry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POST Request to UIWebView]]></title>
    <link href="http://samwize.com/2013/03/15/post-request-to-uiwebview/"/>
    <updated>2013-03-15T01:58:00+08:00</updated>
    <id>http://samwize.com/2013/03/15/post-request-to-uiwebview</id>
    <content type="html"><![CDATA[<p>In the last post, I wrote about <a href="/2013/03/15/auto-fill-username-and-password-fields-in-uiwebview/">how you can automatically fill in username and password in a UIWebView</a>.</p>

<p>This post, I will teach you how you can automatically login to a <code>UIWebView</code>.</p>

<p>It turns out to be simple if the login uses a simple form POST.</p>

<p>```objc
- (void)login {</p>

<pre><code>// Setup the URL
NSString *loginUrl = @"https://just2us.com/login";
NSURL *url = [NSURL URLWithString:loginUrl];    
NSMutableURLRequest *requestObj = [NSMutableURLRequest requestWithURL:url];

// POST the username password
[requestObj setHTTPMethod:@"POST"];
NSString *postString = [NSString stringWithFormat:@"username=%@&amp;password=%@", @"samwize", @"secret"];
NSData *data = [postString dataUsingEncoding: NSUTF8StringEncoding]; 
[requestObj setHTTPBody:data];

// Load the request
self.webview.delegate = self;
[self.webview loadRequest:requestObj];
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto fill Username &amp; Password fields in UIWebView]]></title>
    <link href="http://samwize.com/2013/03/15/auto-fill-username-and-password-fields-in-uiwebview/"/>
    <updated>2013-03-15T01:46:00+08:00</updated>
    <id>http://samwize.com/2013/03/15/auto-fill-username-and-password-fields-in-uiwebview</id>
    <content type="html"><![CDATA[<p>If you use <code>UIWebView</code> and would like to automatically fill in the username and password (or any other text input fields), you could do so by executing Javascript on the webview.</p>

<p>I first learnt about this from <a href="http://stackoverflow.com/a/9722805/242682">stackoverflow</a>, and has edited slightly.</p>

<p>The technique is to implement <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIWebViewDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intf/UIWebViewDelegate"><code>UIWebViewDelegate</code></a> and execute some Javascript in <code>webViewDidFinishLoad</code>.</p>

<p>```objc
- (void)webViewDidFinishLoad:(UIWebView *)webView {</p>

<pre><code>// Auto fill the username and password text fields, assuming the HTML has
// &lt;input type="text" name="username"&gt; and
// &lt;input type="text" name="password"&gt;
NSString *savedUsername = [[NSUserDefaults standardUserDefaults] objectForKey:@"USERNAME"];
NSString *savedPassword = [[NSUserDefaults standardUserDefaults] objectForKey:@"PASSWORD"];
if (savedUsername.length != 0 &amp;&amp; savedPassword.length != 0) {
    // Create js strings
    NSString *loadUsernameJS = [NSString stringWithFormat:@"var inputFields = document.querySelectorAll(\"input[name='username']\"); \
                                for (var i = inputFields.length &gt;&gt;&gt; 0; i--;) { inputFields[i].value = '%@';}", savedUsername];
    NSString *loadPasswordJS = [NSString stringWithFormat:@"var inputFields = document.querySelectorAll(\"input[name='password']\"); \
                                for (var i = inputFields.length &gt;&gt;&gt; 0; i--;) { inputFields[i].value = '%@';}", savedPassword];
    // Runs the JS
    [self.webview stringByEvaluatingJavaScriptFromString: loadUsernameJS];
    [self.webview stringByEvaluatingJavaScriptFromString: loadPasswordJS];
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set User Agent for UIWebView]]></title>
    <link href="http://samwize.com/2013/03/14/set-user-agent-for-uiwebview/"/>
    <updated>2013-03-14T23:46:00+08:00</updated>
    <id>http://samwize.com/2013/03/14/set-user-agent-for-uiwebview</id>
    <content type="html"><![CDATA[<p>There is a very easy (but not documented) way to set the User Agent header for HTTP requests sent via <code>UIWebView</code>.</p>

<p>I find saw the solution from <a href="http://www.mphweb.com/en/blog/easily-set-user-agent-uiwebview">mphweb</a>.</p>

<p>Basically, you just set register it with <code>NSUserDefaults</code>.</p>

<p>```objc
+ (void)initialize {</p>

<pre><code>// Set user agent (the only problem is that we can't modify the User-Agent later in the program)
NSDictionary *dictionnary = [[NSDictionary alloc] initWithObjectsAndKeys:@"Your desired user agent", @"UserAgent", nil];
[[NSUserDefaults standardUserDefaults] registerDefaults:dictionnary];
[dictionnary release];
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Queue HTTP Operations with AFNetworking]]></title>
    <link href="http://samwize.com/2013/03/02/queue-http-operations-with-afnetworking/"/>
    <updated>2013-03-02T22:55:00+08:00</updated>
    <id>http://samwize.com/2013/03/02/queue-http-operations-with-afnetworking</id>
    <content type="html"><![CDATA[<p>In a previous post, I wrote about a <a href="http://samwize.com/2012/10/25/simple-get-post-afnetworking/">simple usage of AFNetworking</a>, the de facto HTTP library for iOS.</p>

<p>This post, I will show how you can use AFNetworking to queue multiple HTTP operations. They could be running concurrently, or have dependencies.</p>

<p>Adding dependencies to HTTP operations is especially useful. For example, you can make sure that you fetch a list of resources, then fetch image1, then image2, ...</p>

<!-- more -->


<p>Adding operations to a queue is rather simple.</p>

<p>You will be using <code>NSOperationQueue</code>, which is part of Apple's <a href="http://developer.apple.com/library/ios/#documentation/cocoa/Reference/NSOperationQueue_class/Reference/Reference.html">Foundation framework</a>.</p>

<p>You will be adding <code>NSOperation</code> to the queue. Not surprisingly, classes such as <code>AFHTTPRequestOperation</code> subclass <code>NSOperation</code>.</p>

<h2>Adding an operation to a queue</h2>

<p>```objc
// Create a http operation
NSURL <em>url = [NSURL URLWithString:@"http://samwize.com/api/cars/"];
NSURLRequest </em>request = [NSURLRequest requestWithURL:url];
AFHTTPRequestOperation <em>operation = [[AFHTTPRequestOperation alloc] initWithRequest:request];
[httpClient registerHTTPOperationClass:[AFHTTPRequestOperation class]];
[operation setCompletionBlockWithSuccess:<sup>(AFHTTPRequestOperation</sup> </em>operation, id responseObject) {</p>

<pre><code>// Print the response body in text
NSLog(@"Response: %@", [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding]);
</code></pre>

<p>} failure:<sup>(AFHTTPRequestOperation</sup> <em>operation, NSError </em>error) {</p>

<pre><code>NSLog(@"Error: %@", error);
</code></pre>

<p>}];</p>

<p>// Add the operation to a queue
// It will start once added
NSOperationQueue *operationQueue = [[NSOperationQueue alloc] init];
[operationQueue addOperation:operation];
```</p>

<p>As you can see, it is just 2 more lines of code.</p>

<h2>Adding multiple operations and run them concurrently</h2>

<p><code>objc
NSOperationQueue *operationQueue = [[NSOperationQueue alloc] init];
// Set the max number of concurrent operations (threads)
[operationQueue setMaxConcurrentOperationCount:3];
[operationQueue addOperations:@[operation1, operation2, operation3] waitUntilFinished:NO];
</code></p>

<h2>Adding Dependencies</h2>

<p>Let's say we have 2 operations, and we want <code>operation2</code> to start only after <code>operation1</code> has finish.</p>

<p>```objc
NSOperationQueue *operationQueue = [[NSOperationQueue alloc] init];
// Make operation2 depend on operation1
[operation2 addDependency:operation1];
[operationQueue addOperations:@[operation1, operation2, operation3] waitUntilFinished:NO];</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
