<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Junda Ong]]></title>
  <link href="http://samwize.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://samwize.com/"/>
  <updated>2013-01-19T00:38:00+08:00</updated>
  <id>http://samwize.com/</id>
  <author>
    <name><![CDATA[Junda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS Developer Tips 2013]]></title>
    <link href="http://samwize.com/2013/01/18/ios-developer-tips-2013/"/>
    <updated>2013-01-18T21:47:00+08:00</updated>
    <id>http://samwize.com/2013/01/18/ios-developer-tips-2013</id>
    <content type="html"><![CDATA[<p>If you are starting out iOS development, there are some good tips for you from Stuart Hall:</p>

<p><a href="http://stuartkhall.com/posts/ios-development-tips-i-would-want-if-i-was-starting-out-today">http://stuartkhall.com/posts/ios-development-tips-i-would-want-if-i-was-starting-out-today</a></p>

<p>There is only one point which I don't agree on:</p>

<blockquote><p>Story Boards Are Just For Rapid Prototypes</p></blockquote>

<!-- more -->


<p>The choice between "Story Boards" vs "Code the UI" depends very much on your app requirements.</p>

<p>For simple apps that use the stock UI components, Story Board is really useful because</p>

<ol>
<li><p>Drag and drop to design = very quick and easy to make UI changes</p></li>
<li><p>Support Auto Layout easily = Design iPad and iPhone at the same time easily</p></li>
<li><p>Xcode support = Beautiful UI is possible with powerful customizable features</p></li>
</ol>


<p>In each version of iOS, Apple has made Story Board (XIB) and Xcode support much better. They kept improving. They value Story Board.</p>

<p>Hence, you will be missing out a lot if you didn't even bother trying it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Devices Cheat Sheet]]></title>
    <link href="http://samwize.com/2013/01/11/ios-devices-cheat-sheet/"/>
    <updated>2013-01-11T23:21:00+08:00</updated>
    <id>http://samwize.com/2013/01/11/ios-devices-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Not long ago, I posted about <a href="http://samwize.com/2012/10/29/ios-guide-to-multiple-device-resolutions/">a guide to iOS multiple devices resolutions</a>.</p>

<p>There is a similar, but more complete <a href="http://ivomynttinen.com/blog/the-ios-design-cheat-sheet-volume-2/">cheat sheet</a> from Ivo.</p>

<p>Here is 1 of the table:</p>

<p><img class="center" src="/images/ios-device-resolutions.png"></p>

<p>For the other guides on display PPI, icons size and other iOS design elements, refer to the <a href="http://ivomynttinen.com/blog/the-ios-design-cheat-sheet-volume-2/">cheat sheet</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable NSZombie for Debugging Crashes]]></title>
    <link href="http://samwize.com/2012/12/07/enable-nszombie-for-debugging-crashes/"/>
    <updated>2012-12-07T23:50:00+08:00</updated>
    <id>http://samwize.com/2012/12/07/enable-nszombie-for-debugging-crashes</id>
    <content type="html"><![CDATA[<p>I posted a tip before on how you can <a href="http://blog.just2us.com/2012/02/find-the-real-exception-in-xcode-debugger/">find the real cause of exception in Xcode</a>.</p>

<p>There is another feature which you can enable to help in debugging.</p>

<p><code>NSZombie</code> is an option that helps to trace overreleasing of objects.</p>

<!-- more -->


<p>Sometimes you might encounter exceptions <code>objc_msgSend</code>, which no matter how many times you Continue, an exception is thrown. That is a good sign get help from the zombie.</p>

<p>To enable, go to Product > Edit Scheme > Diagnostics, and check <strong>Enable Zombie Objects</strong>.</p>

<p>Run and debug again, and more meaningful info of what was deallocated wrongly will be shown.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7 iOS Custom Popup Views]]></title>
    <link href="http://samwize.com/2012/12/06/7-ios-custom-popup-views/"/>
    <updated>2012-12-06T21:38:00+08:00</updated>
    <id>http://samwize.com/2012/12/06/7-ios-custom-popup-views</id>
    <content type="html"><![CDATA[<p>I was researching on popup/modal views to use, and finally decided on <a href="https://github.com/rnystrom/RNBlurModalView">RNBlurModalView</a>, which has a nicer blurred background effect.</p>

<p>Nonetheless, others are good depending on your use.</p>

<p>Here are 7 custom popup views for iOS:</p>

<!-- more -->


<h2><a href="https://github.com/coneybeare/UAModalPanel">UAModalPanel: Simple dismissiable popup</a></h2>

<p><img src="https://github.com/coneybeare/UAModalPanel/raw/master/_README_ASSETS/UAModalPanel.jpg"></p>

<h2><a href="https://github.com/rnystrom/RNBlurModalView">RNBlurModalView: With a blurred background</a></h2>

<p><img src="https://github.com/rnystrom/RNBlurModalView/raw/master/images/image.jpg"></p>

<h2><a href="https://github.com/martinjuhasz/MJPopupViewController">MJPopupViewController: With different transition effects</a></h2>

<p><img src="https://raw.github.com/martinjuhasz/MJPopupViewController/master/assets/demo2.png"></p>

<h2><a href="http://www.mobilebricks.com/ios/alpopupview">ALPopupView: Facebook-like popup</a> ($19)</h2>

<p><img src="http://iosmix.com/sites/default/files/styles/default/public/full_1185_0.png"></p>

<h2><a href="http://www.50pixels.com/blog/labs/open-library-fppopover-ipad-like-popovers-for-iphone/">FPPopover: iPad-like popovers for iPhone</a></h2>

<p><img src="http://www.50pixels.com/blog/wp-content/uploads/2012/05/framedscreenshot11.png"></p>

<h2><a href="https://github.com/PaulSolt/WEPopover">WEPopover: Another iPad-like popover</a></h2>

<p><img src="https://a248.e.akamai.net/camo.github.com/1f240a003f5d854c5400f9001ca9b35084185281/687474703a2f2f7061756c736f6c742e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031312f30342f6950686f6e652e6a7067"></p>

<h2><a href="https://github.com/chrismiles/CMPopTipView">CMPopTipView: Bubble Tooltip</a></h2>

<p><img src="https://a248.e.akamai.net/camo.github.com/d953577314aafa7c65d1eb3b15f7fd73c9946d1e/687474703a2f2f6661726d352e7374617469632e666c69636b722e636f6d2f343030352f353139313634313033305f326239336134613535392e6a7067"></p>

<h2><a href="https://github.com/scalessec/Toast">Android-like Toast</a></h2>

<p>PS: I created <a href="https://github.com/samwize/JDToaster">JDToaster 2 years ago</a>, which unfortunately I didn't update..</p>

<p><img src="https://a248.e.akamai.net/camo.github.com/3b536e7781bd1d4bc3c409dd460ef6a10d99e3ce/687474703a2f2f692e696d6775722e636f6d2f6f4d32386c2e706e67"></p>

<h2><a href="https://github.com/m1entus/WCAlertView">WCAlertView: UIALertView with blocks</a></h2>

<p><img src="https://raw.github.com/m1entus/WCAlertView/master/Screens/7thumb.png"></p>

<h2><a href="https://github.com/gpambrozio/BlockAlertsAnd-ActionSheets">UIAlertView and UIActionSheet with blocks</a></h2>

<p><img src="https://a248.e.akamai.net/camo.github.com/945fddfea4fd0fd04729eef08e616fcb270475a0/687474703a2f2f626c6f672e636f646563726f707065722e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031322f30312f694f532d53696d756c61746f722d53637265656e2d73686f742d4a616e2d32302d323031322d342e32382e31382d504d2d323030783330302e706e67"></p>

<h2>Cocoacontrols - for more popups!</h2>

<p><a href="http://www.cocoacontrols.com/search?utf8=%E2%9C%93&amp;q=popup">http://www.cocoacontrols.com/search?utf8=%E2%9C%93&amp;q=popup</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on making iOS App Icons]]></title>
    <link href="http://samwize.com/2012/11/26/tips-on-making-ios-app-icons/"/>
    <updated>2012-11-26T23:42:00+08:00</updated>
    <id>http://samwize.com/2012/11/26/tips-on-making-ios-app-icons</id>
    <content type="html"><![CDATA[<p>Making a beautiful iOS app icon takes some hard work. Even more work now that there are more devices with different resolutions.</p>

<p>This post is to provide some of the tips in the making Apple's trademarked iPhone rounded icon.</p>

<!-- more -->


<h2>Understanding the resolutions</h2>

<p>There is quite a number of different resolutions that is needed for 1 app.</p>

<p>Refer to this <a href="http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/IconsImages/IconsImages.html#//apple_ref/doc/uid/TP40006556-CH14-SW1">Apple document</a>.</p>

<p>Note that every icon can be different in terms of how it looks. So in theory you can have a 57x57 that is totally different looking from your 512x512.</p>

<h2>Icon Template</h2>

<p>There are many template around. The most popular (now) is from <a href="http://appicontemplate.com/">http://appicontemplate.com/</a>.</p>

<p>Using Photoshop smart objects, the template let you edit the biggest size, and it will automatically scale down to the smaller sizes, and export them automatically.</p>

<h2>Rounded corner radius</h2>

<p>If you are not using the template or need a specific resolution, it is important that you know the rounded corner radius for each of the icon reolution. This <a href="http://stackoverflow.com/a/10239376/242682">discussion</a> explained well.</p>

<p>To summarize,</p>

<blockquote><p>Rounded corner radius = icon length x 10/57</p></blockquote>

<p>That is,</p>

<ul>
<li>Icon512.png - 512px - 89.825</li>
<li>Icon.png - 57px - 10</li>
<li>Icon@2x.png - 114px - 20</li>
<li>Icon-72.png - 72px - 12.632</li>
<li>Icon-72@2x.png - 144px - 25.263</li>
<li>Icon-Small.png - 29px - 5.088</li>
<li>Icon-Small@2x.png - 58px - 10.175</li>
</ul>


<h2>Mask</h2>

<p>You can get a set of mask from within Xcode.</p>

<p>Open the following directory.</p>

<pre><code>open /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk/System/Library/PrivateFrameworks/MobileIcons.framework
</code></pre>

<p>But there is also a <a href="http://stackoverflow.com/a/1834558/242682">way</a> to programmatically set a round corner masking:</p>

<p>```objc</p>

<pre><code>imageView.layer.cornerRadius = 10.0;
imageView.layer.masksToBounds = YES;
imageView.layer.borderColor = [UIColor lightGrayColor].CGColor;
imageView.layer.borderWidth = 1.0;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
