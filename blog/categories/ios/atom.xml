<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Junda Ong]]></title>
  <link href="http://samwize.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://samwize.github.com/"/>
  <updated>2012-10-28T10:22:56+08:00</updated>
  <id>http://samwize.github.com/</id>
  <author>
    <name><![CDATA[Junda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple GET/POST AFNetworking]]></title>
    <link href="http://samwize.github.com/2012/10/25/simple-get-post-afnetworking/"/>
    <updated>2012-10-25T00:32:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/25/simple-get-post-afnetworking</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> is the choice for iOS/Mac developers when it comes to choosing a HTTP library.</p>

<p><a href="http://allseeing-i.com/ASIHTTPRequest/">ASIHTTPRequest</a> used to be the choice, until 2011 when it became inactive.</p>

<p>I am one of the many who is forced to switch camp.</p>

<!-- more -->


<p>In many ways, it seems AFNetworking would be better. It uses blocks!</p>

<p>However, I find the documentation lacking. It has an <a href="https://github.com/AFNetworking/AFNetworking">overview</a>, <a href="https://github.com/AFNetworking/AFNetworking/wiki/Getting-Started-with-AFNetworking">getting started</a>, <a href="https://github.com/AFNetworking/AFNetworking/wiki/Introduction-to-AFNetworking">introduction</a>, <a href="http://afnetworking.github.com/AFNetworking/">complete reference</a>, ... But yet, it didn't provide example on how you make a simple HTTP GET or POST.</p>

<p>Here is how you do it:</p>

<h2>GET</h2>

<p>```objc</p>

<pre><code>AFHTTPClient *httpClient = [[AFHTTPClient alloc] init];
NSMutableURLRequest *request = [httpClient requestWithMethod:@"GET" 
                                                        path:@"http://samwize.com/api/pigs/" 
                                                  parameters:nil];
AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc] initWithRequest:request];
[httpClient registerHTTPOperationClass:[AFHTTPRequestOperation class]];
[operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {
    // Print the response body in text
    NSLog(@"Response: %@", [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding]);
} failure:^(AFHTTPRequestOperation *operation, NSError *error) {
    NSLog(@"Error: %@", error);
}];
[operation start];
</code></pre>

<p>```</p>

<h2>POST</h2>

<p>POST a urlencoded form <code>name=piggy</code> in the http body.</p>

<p>```objc</p>

<pre><code>AFHTTPClient *httpClient = [[AFHTTPClient alloc] init];
[httpClient setParameterEncoding:AFFormURLParameterEncoding];
NSMutableURLRequest *request = [httpClient requestWithMethod:@"POST" 
                                                        path:@"http://samwize.com/api/pig/" 
                                                  parameters:@{@"name":@"piggy"}];

// Similar to GET code ...
</code></pre>

<p>```</p>

<p>If you want to POST a json such as <code>{"name":"piggy"}</code>, you change the encoding:</p>

<p>```objc</p>

<pre><code>[httpClient setParameterEncoding:AFJSONParameterEncoding];
</code></pre>

<p>```</p>

<p>If you want to do a multi-part POST of an image, you do this:</p>

<p>```objc
NSMutableURLRequest *request = [httpClient multipartFormRequestWithMethod:@"POST" path:@"http://samwize.com/api/pig/photo" parameters:nil constructingBodyWithBlock: ^(id <AFMultipartFormData>formData) {</p>

<pre><code>[formData appendPartWithFileData:imageData name:@"avatar" fileName:@"avatar.jpg" mimeType:@"image/jpeg"];
</code></pre>

<p>}];
```</p>

<p>This simple guide has been helped by <a href="http://stackoverflow.com/questions/9927945/afnetworking-post-to-rest-webservice">this</a>, <a href="http://stackoverflow.com/questions/9275333/afnetworking-post-request-with-application-x-www-form-urlencoded">this</a> and <a href="http://stackoverflow.com/questions/8468065/is-there-an-example-of-afhttpclient-posting-json-with-afnetworking">this</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error: Application Executable Missing Required Architecture]]></title>
    <link href="http://samwize.github.com/2012/10/23/error-application-executable-missing-required-architecture/"/>
    <updated>2012-10-23T22:20:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/23/error-application-executable-missing-required-architecture</id>
    <content type="html"><![CDATA[<p>I swear this is the most common error I have seen whenever I upload an iOS binary.</p>

<blockquote><p>Error: application executable is missing a required architecture armv6</p></blockquote>

<p>It occurs every time after Apple release a new iPhone (or architecture type).</p>

<!-- more -->


<p>In 2011, when I was using Xcode 4.2, when I think iPhone 4 was out, I need to <a href="http://stackoverflow.com/a/8538393/242682">change</a> the Architectures settings from <code>armv7</code> to <code>armv6 armv7</code>.</p>

<p>There is another similar due to to "no architectures to compile for" which you can <a href="http://stackoverflow.com/a/5294634/242682">solve</a> by changing <code>VALID_ARCHS</code>.</p>

<p>Now in 2012, with Xcode 4.5, with the new iPhone 5, and the phasing out of armv6 (used in the old generation of iPod and iPhone), it once again introduced the error.</p>

<p>This time, you have to <a href="http://stackoverflow.com/a/12524366/242682">set</a> the deployment target to at least iOS 4.3.</p>

<p>Well done Apple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating App for iPhone 5]]></title>
    <link href="http://samwize.github.com/2012/10/22/updating-app-for-iphone-5/"/>
    <updated>2012-10-22T01:14:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/22/updating-app-for-iphone-5</id>
    <content type="html"><![CDATA[<p>This post is a guide to updating existing app for iPhone 5.</p>

<p>As you already knew, the new iPhone 5 introduced a taller screen at 4 inch, while all iPhones before is at 3.5 inch.</p>

<p>There are a couple of steps that you have to do to support the taller screen, and it really depends on how you develop your app in the first place. You might use all of the techniques below, or none.</p>

<p>These techniques are inspired by <a href="http://stackoverflow.com/questions/12395200/how-to-develop-or-migrate-apps-for-iphone-5-screen-resolution">answers</a> <a href="http://stackoverflow.com/questions/12518879/extend-app-for-iphone-5-best-practice">on</a> <a href="http://stackoverflow.com/questions/12519110/what-to-name-images-for-iphone-5-screen-size">Stackoverflow</a>. The result is a <code>Device</code> class I created at <a href="https://gist.github.com/3926123">https://gist.github.com/3926123</a></p>

<!-- more -->


<h2>1. Default-568h@2x.png</h2>

<p>There isn't a setting to specify a project supports iPhone 5. Instead, a presence of a <code>Default-568h@2x.png</code> signify that it supports iPhone 5.</p>

<p>The size is 640 x 1136.</p>

<p>Xcode 4.5 will actually offer to add one automatically.</p>

<h2>2. Code to detect 4-inch screen</h2>

<p>You can detect the 4-inch screen size with the following method:</p>

<p>```objc
/<em>* Returns true if it is a iPhone/iPod with 4 inch tall screen </em>/
+(BOOL)isScreen4Inch {</p>

<pre><code>if(UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
    CGRect screenBounds = [[UIScreen mainScreen] bounds];
    if (screenBounds.size.height == 568)
        return YES;
}
return NO;
</code></pre>

<p>}
```</p>

<p>I have this in <code>Device.h</code>, so import and use.</p>

<p>```objc
if ([Device isScreen4Inch]) {</p>

<pre><code>// Code for 4 inch
</code></pre>

<p>} else {</p>

<pre><code>// Code for anything else (3.5 inch or iPad)
</code></pre>

<p>}
```</p>

<h2>3. Use Auto Layout for iOS6</h2>

<p>If you are supporting only iOS6 and above, you should use Auto Layout.</p>

<p>You can read up a tutorial by <a href="http://www.raywenderlich.com/20881/beginning-auto-layout-part-1-of-2">Ray Wenderlich</a>.</p>

<h2>4. Set auto resizing mask for pre iOS6</h2>

<p>If you are still supporting pre iOS6, you still need auto resizing mask for your views to stretch and re-position automatically.</p>

<p>Refer to <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/uiview/uiview.html">Apple UIView doc</a> on <code>UIViewAutoresizing</code>.</p>

<p>This 'feature' was in iOS ever since iOS is available. If you design your apps mostly using Xcode Interface Builder, this would one of the most needed change.</p>

<p>You could change a subview to auto resize its width/height, and fix it's margin to left/right/top/bottom.</p>

<h2>5. Stretch Images</h2>

<p>If you are using Xcode Interface Builder, change the UIImageView <code>mode</code> to <code>Scale to Fill</code> (or others).</p>

<p>Then change the <code>Stretching</code> properties. The values are a fraction of the image size. For example, X and Y are 0.5, and Width and Height are 0.1, it means stretch the portion of the image at center with 10% width and height.</p>

<p>Your images can also be <a href="http://mobiledevelopertips.com/user-interface/ios-5-uiimage-and-resizableimagewithcapinsets.html">stretched</a> with UIImage <code>resizableImageWithCapInsets:</code>.</p>

<p>But that works only if your image has portion that can be stretched without distortion. If it doesn't, you have to create a new image <code>-568@2x</code> image, and use the trick covered next to load it automatically.</p>

<h2>6. Load -568h@2x images</h2>

<p>Unlike <code>@2x</code> which are loaded automatically for Retina Display, the <code>-568h@2x</code> are not loaded automatically for the taller iPhone (except the <code>Default-568h@2x.png</code>).</p>

<p>I use a convenient method below:</p>

<p>```objc
+(UIImage<em>)imageNamedFor568h:(NSString</em>)imageName {</p>

<pre><code>if ([Device isScreen4Inch]) {
    NSString *imageNameFor568h = [NSString stringWithFormat:@"%@-568h.%@", [imageName stringByDeletingPathExtension], [imageName pathExtension]];
    return [UIImage imageNamed:imageNameFor568h];
}
return [UIImage imageNamed:imageName];
</code></pre>

<p>}
```</p>

<p>Using category, I introduced the method for UIImage.</p>

<p>To use, I would have to change the methods <code>[UIImage imageName:@"foo.png"]</code> to <code>[UIImage imageNameFor568h:@"foo.png"]</code>.</p>

<h2>7. iOS Simulator</h2>

<p>To run and test on a 4 inch iPhone, select <strong>Hardware</strong> > <strong>Device</strong> > <strong>iPhone (Retina 4-inch)</strong>.</p>

<h2>8. Last words..</h2>

<p>It largely depends on how you code your existing apps.</p>

<p>Use the above techniques as needed, and handily use the <a href="https://gist.github.com/3926123">Device class</a> methods.</p>

<p>If you use any third party libraries, you would also need to update their libs with support for <code>armv7s</code> (a new architecture for iPhone5). Popular libs are already updated at this point of writing eg. Flurry, Google Admob, and other ad networks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup GHUnit with CocoaPods]]></title>
    <link href="http://samwize.github.com/2012/10/04/how-to-setup-ghunit-with-cocoapods/"/>
    <updated>2012-10-04T23:21:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/04/how-to-setup-ghunit-with-cocoapods</id>
    <content type="html"><![CDATA[<p>The <a href="http://gabriel.github.com/gh-unit/docs/appledoc_include/guide_install_ios_4.html">installation guide for GHUnit</a> is for installing the framework in the traditional way.</p>

<p>As you might know, <a href="http://cocoapods.org/">CocoaPods</a> is the new way to handle dependencies. Of course, GHUnit is supported.</p>

<p>The is a lack of a guide on how you setup the two useful iOS libraries together.</p>

<!-- more -->


<p>It is similar to the <a href="http://gabriel.github.com/gh-unit/docs/appledoc_include/guide_install_ios_4.html">official guide</a>. I am going to point out the differences when need to.</p>

<h2>Step 1 - Create Test Target</h2>

<p>This is the same. You create a completely new application target.</p>

<p>I prefer to name it <code>AppGHTests</code>, as I might still be using <code>AppTests</code> for my <a href="/2012/10/03/sentestingkit-does-not-support-wait-for-blocks">SenTestings</a>.</p>

<p><img class="center" src="/images/xcode-ghunit-pods-new-target.png"></p>

<h2>Step 2 - Configure Test Target</h2>

<p>You DON'T have to download and copy <code>GHUnitIOS.framework</code> to your project since you are using CocoaPods. Instead, you should setup GHUnit pods.</p>

<p>Edit the <code>Prodfile</code> and add GHUnitIOS.</p>

<pre><code>platform :ios
pod 'GHUnitIOS', '0.5.5'
</code></pre>

<p>Then install the pod as per normal.</p>

<pre><code>$ pod install
</code></pre>

<p>Continue with the official guide to remove the unnecessary files, and edit <code>main.m</code> to replace the delegate class with <code>GHUnitIOSAppDelegate</code>.</p>

<h2>Step 3 - Configure Pod for Test Target</h2>

<p>This part is IMPORTANT. The new test target will not include the pods.</p>

<p>You need to configure the target to be based on Pods project. Refer to <a href="http://samwize.com/2012/10/01/unit-tests-with-cocoapods/">this post</a>.</p>

<p>Lastly, add the <code>libPods.a</code> library to the test target.</p>

<p><img class="center" src="/images/xcode-ghunit-pods-libpods.png"></p>

<p>That's it. Run the test target!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SenTestingKit does not support wait for blocks]]></title>
    <link href="http://samwize.github.com/2012/10/03/sentestingkit-does-not-support-wait-for-blocks/"/>
    <updated>2012-10-03T00:21:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/03/sentestingkit-does-not-support-wait-for-blocks</id>
    <content type="html"><![CDATA[<p>I was using <a href="http://developer.apple.com/library/mac/#documentation/developertools/Conceptual/UnitTesting/00-About_Unit_Testing/about.html">SenTestingKit</a>, the default unit testing framework from Apple, when I found out that it does not support tests that involve asynchronous methods, or blocks.</p>

<p>That's a waste.</p>

<!-- more -->


<p>Though there is <a href="https://gist.github.com/2254570">a workaround</a> using semaphore.</p>

<p>``` objc
- (void)testBlockMethod {</p>

<pre><code>dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);    

// Your block method eg. AFNetworking
NSURL *url = [NSURL URLWithString:@"http://httpbin.org/ip"];
NSURLRequest *request = [NSURLRequest requestWithURL:url];
AFJSONRequestOperation *operation = [AFJSONRequestOperation JSONRequestOperationWithRequest:request success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
    NSLog(@"IP Address: %@", [JSON valueForKeyPath:@"origin"]);
    STAssertNotNil(JSON, @"JSON not loaded");
    // Signal that block has completed
    dispatch_semaphore_signal(semaphore);        
} failure:nil];
[operation start];

// Run loop
while (dispatch_semaphore_wait(semaphore, DISPATCH_TIME_NOW))
    [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode
                             beforeDate:[NSDate dateWithTimeIntervalSinceNow:10]];
dispatch_release(semaphore);    
</code></pre>

<p>}
```</p>

<p>But if you mind, there are lots of <a href="http://stackoverflow.com/questions/4114083/ios-tests-specs-tdd-bdd-and-integration-acceptance-testing">other testing frameworks</a>, eg <a href="https://github.com/gabriel/gh-unit">GHUnit</a> supports asynchronous testing.</p>
]]></content>
  </entry>
  
</feed>
