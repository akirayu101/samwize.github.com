<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Junda Ong]]></title>
  <link href="http://samwize.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://samwize.github.com/"/>
  <updated>2012-11-06T22:00:20+08:00</updated>
  <id>http://samwize.github.com/</id>
  <author>
    <name><![CDATA[Junda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Custom Localization and genstrings]]></title>
    <link href="http://samwize.github.com/2012/11/06/my-custom-localization-and-genstrings/"/>
    <updated>2012-11-06T21:49:00+08:00</updated>
    <id>http://samwize.github.com/2012/11/06/my-custom-localization-and-genstrings</id>
    <content type="html"><![CDATA[<p>This post is about some custom stuff I did for <a href="https://developer.apple.com/library/ios/#documentation/MacOSX/Conceptual/BPInternational/Articles/ChoosingLocalizations.html">localization</a>.</p>

<p>It does not cover the <a href="http://www.raywenderlich.com/2876/how-to-localize-an-iphone-app-tutorial">basic</a> of how you localized an app, nor how to use the Apple provided <a href="http://spritebandits.wordpress.com/2012/01/25/ios-iphone-app-localization-genstrings-tips/">genstrings</a> tool.</p>

<!-- more -->


<p>I have some particular bad vibes with using <code>NSLocalizedString</code>. I hate it being 17 characters long, and the REQUIRED comment parameter that you MUST pass in, which usually is just <code>nil</code> for me.</p>

<p>And so I have my own Macro called <code>Localized</code>.</p>

<p>Which I improved to read from other table strings, and has an awesome recursive replacement.</p>

<p>By doing that, I lose the use of <code>genstrings</code>, as it no longer uses <code>NSLocalizedString</code>. Unfortunately <code>genstrings</code> is closed source. But fortunately, some <a href="https://github.com/dunkelstern/Cocoa-Localisation-Helper">python helper</a> is around.</p>

<p>And the result is at <a href="https://github.com/samwize/localized">https://github.com/samwize/localized</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Accessibility Guide for Developers]]></title>
    <link href="http://samwize.github.com/2012/11/04/ios-accessibility-guide-for-developers/"/>
    <updated>2012-11-04T18:25:00+08:00</updated>
    <id>http://samwize.github.com/2012/11/04/ios-accessibility-guide-for-developers</id>
    <content type="html"><![CDATA[<p>There are some simple steps you can take to make your iOS app friendly to the visually impaired users. All you need is to provide more meaningful labels and iOS VoiceOver will take care of it.</p>

<p>I am guilty that I didn't take these simple steps whenever I release a new app, even though I know about it since iOS 3.. Sometimes, I need a <a href="http://mattgemmell.com/2012/10/26/ios-accessibility-heroes-and-villains/">reminder</a>.</p>

<p>Treat this post as <em>another reminder</em>. And as a guide.</p>

<!-- more -->


<h2>Test with Accessibility Inspector</h2>

<p>In <strong>iOS Simulator</strong> (NOT actual device), go to Settings > General > Accessibility and switch it on.</p>

<p>You may now observe accessibility information for each UI element.</p>

<h2>Define in Interface Builder</h2>

<p>If you are using IB to build your UI, you can easily edit from the Identity Inspector. All <code>UIView</code> comes with accessibility attributes.</p>

<p><img src="/images/xcode-accessibility-inspector.png" title="Accessibility Inspector" ></p>

<ul>
<li>Enable Accessibility</li>
<li>Enter a label. This is what will be read with VoiceOver.</li>
<li>Enter a hint, if the label could be ambiguous.</li>
</ul>


<h2>Change Programmatically</h2>

<p>You can also change the label and hint programmatically.</p>

<p>If you have a <code>UILabel</code>, it will read the text of the label. However if that is not descriptive, you could</p>

<pre><code>mylabel.accessibilityLabel = @"Play the music";
mylabel.accessibilityHint = @"Play the music right now";
</code></pre>

<h2>UITableViewCell</h2>

<p>It is most likely a table view cell is made up of a couple of UI elements. However, it would be difficult to select the individual elements.</p>

<p>Hence you could help be aggregating the labels and set the <code>UITableCellView</code> accessibility options.</p>

<h2>UISlider</h2>

<p>For slider, you may also want to set the value.</p>

<pre><code>mySlider.accessibilityValue = @"Volume at 50%";
</code></pre>

<h2>Test on Device</h2>

<p>Go to Settings > General > Accessibility > Enable VoiceOver.</p>

<p>Test it out!</p>

<h2>Advanced</h2>

<p>I have merely list the <em>simple</em> steps I usually used.</p>

<p>Apple has it's own <a href="http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/iPhoneAccessibility/Making_Application_Accessible/Making_Application_Accessible.html#//apple_ref/doc/uid/TP40008785-CH102-SW5">complete guide</a> on how you should approach the topic, including custom views and <code>UIAccessibilityPostNotification</code>. <a href="http://mattgemmell.com/2010/12/19/accessibility-for-iphone-and-ipad-apps/">Matt Gemmell</a> also covers the topic.</p>

<p>Hope you be a hero!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Guide to Multiple Device Resolutions]]></title>
    <link href="http://samwize.github.com/2012/10/29/ios-guide-to-multiple-device-resolutions/"/>
    <updated>2012-10-29T23:23:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/29/ios-guide-to-multiple-device-resolutions</id>
    <content type="html"><![CDATA[<p>With every iOS updates and new release of devices from Apple, there are more things developers have to do.</p>

<p>In order to support these new devices, you first need to understand these devices.</p>

<!-- more -->


<h2>Device Resolutions</h2>

<p>Apple provides a <a href="http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/IconsImages/IconsImages.html#//apple_ref/doc/uid/TP40006556-CH14-SW1">table matrix</a> on the App Icons, Screen size, and tool bar icon sizes for the various devices.</p>

<table>
<thead>
<tr>
<th></th>
<th>             </th>
<th> iPhone 5        </th>
<th> iPhone (Retina)   </th>
<th> iPhone        </th>
<th> iPad (Retina) </th>
<th> iPad          </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> App Icon    </td>
<td> 114 x 114       </td>
<td> 114 x 114         </td>
<td> 57 x 57       </td>
<td> 144 x 144     </td>
<td> 72 x 72       </td>
</tr>
<tr>
<td></td>
<td> Default.png </td>
<td> 640 x 1136      </td>
<td> 640 x 960         </td>
<td> 320 x 480     </td>
<td> 1536 x 2008   </td>
<td> 768 x 1004    </td>
</tr>
<tr>
<td></td>
<td> Toolbar icon</td>
<td> 40 x 40         </td>
<td> 40 x 40           </td>
<td> 20 x 20       </td>
<td> 40 x 40       </td>
<td> 20 x 20       </td>
</tr>
</tbody>
</table>


<h2>Image Resource File</h2>

<p>Apple introduced an easy way to load <a href="http://developer.apple.com/library/ios/#documentation/2DDrawing/Conceptual/DrawingPrintingiOS/SupportingHiResScreensInViews/SupportingHiResScreensInViews.html#//apple_ref/doc/uid/TP40010156-CH15">images</a> automatically for the devices.</p>

<p>The rule goes like this:</p>

<ul>
<li><p>Standard: <code>&lt;ImageName&gt;&lt;device_modifier&gt;.&lt;filename_extension&gt;</code></p></li>
<li><p>High resolution: <code>&lt;ImageName&gt;@2x&lt;device_modifier&gt;.&lt;filename_extension&gt;</code></p></li>
</ul>


<p>For <a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/LoadingResources/ImageSoundResources/ImageSoundResources.html#//apple_ref/doc/uid/10000051i-CH7-SW1">example</a>,</p>

<ul>
<li>MyImage.png - Default version of an image resource.</li>
<li>MyImage@2x.png - High-resolution version of an image resource for devices with Retina displays.</li>
<li>MyImage~iphone.png - Version of an image for iPhone and iPod touch.</li>
<li>MyImage@2x~iphone.png - High-resolution version of an image for iPhone and iPod touch devices with Retina displays.</li>
<li>MyImage~ipad.png - Version of an image for iPad</li>
<li>MyImage@2x~ipad.png - High-resolution version of an image for iPad with Retina displays.</li>
</ul>


<p>With that knowledge, you could load a UIImage</p>

<pre><code>UIImage *anImage = [UIImage imageNamed:@"MyImage"];
</code></pre>

<p>and the appropriate resource file will be loaded.</p>

<h2>iPhone 5 - taller screen</h2>

<p>Unfortunately, for the taller iPhone 5, it does not automatically load <code>MyImage@2x~iphone5.png</code>.</p>

<p>You could use a <a href="http://stackoverflow.com/questions/5088945/use-2x-retina-images-for-ipad-in-universal-app-and-does-apple-prefer-native-ap">handy</a> UIImage category to load.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple GET/POST AFNetworking]]></title>
    <link href="http://samwize.github.com/2012/10/25/simple-get-post-afnetworking/"/>
    <updated>2012-10-25T00:32:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/25/simple-get-post-afnetworking</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> is the choice for iOS/Mac developers when it comes to choosing a HTTP library.</p>

<p><a href="http://allseeing-i.com/ASIHTTPRequest/">ASIHTTPRequest</a> used to be the choice, until 2011 when it became inactive.</p>

<p>I am one of the many who is forced to switch camp.</p>

<!-- more -->


<p>In many ways, it seems AFNetworking would be better. It uses blocks!</p>

<p>However, I find the documentation lacking. It has an <a href="https://github.com/AFNetworking/AFNetworking">overview</a>, <a href="https://github.com/AFNetworking/AFNetworking/wiki/Getting-Started-with-AFNetworking">getting started</a>, <a href="https://github.com/AFNetworking/AFNetworking/wiki/Introduction-to-AFNetworking">introduction</a>, <a href="http://afnetworking.github.com/AFNetworking/">complete reference</a>, ... But yet, it didn't provide example on how you make a simple HTTP GET or POST.</p>

<p>Here is how you do it:</p>

<h2>GET</h2>

<p>```objc</p>

<pre><code>AFHTTPClient *httpClient = [[AFHTTPClient alloc] init];
NSMutableURLRequest *request = [httpClient requestWithMethod:@"GET" 
                                                        path:@"http://samwize.com/api/pigs/" 
                                                  parameters:nil];
AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc] initWithRequest:request];
[httpClient registerHTTPOperationClass:[AFHTTPRequestOperation class]];
[operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {
    // Print the response body in text
    NSLog(@"Response: %@", [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding]);
} failure:^(AFHTTPRequestOperation *operation, NSError *error) {
    NSLog(@"Error: %@", error);
}];
[operation start];
</code></pre>

<p>```</p>

<h2>POST</h2>

<p>POST a urlencoded form <code>name=piggy</code> in the http body.</p>

<p>```objc</p>

<pre><code>AFHTTPClient *httpClient = [[AFHTTPClient alloc] init];
[httpClient setParameterEncoding:AFFormURLParameterEncoding];
NSMutableURLRequest *request = [httpClient requestWithMethod:@"POST" 
                                                        path:@"http://samwize.com/api/pig/" 
                                                  parameters:@{@"name":@"piggy"}];

// Similar to GET code ...
</code></pre>

<p>```</p>

<p>If you want to POST a json such as <code>{"name":"piggy"}</code>, you change the encoding:</p>

<p>```objc</p>

<pre><code>[httpClient setParameterEncoding:AFJSONParameterEncoding];
</code></pre>

<p>```</p>

<p>If you want to do a multi-part POST of an image, you do this:</p>

<p>```objc
NSMutableURLRequest *request = [httpClient multipartFormRequestWithMethod:@"POST" path:@"http://samwize.com/api/pig/photo" parameters:nil constructingBodyWithBlock: ^(id <AFMultipartFormData>formData) {</p>

<pre><code>[formData appendPartWithFileData:imageData name:@"avatar" fileName:@"avatar.jpg" mimeType:@"image/jpeg"];
</code></pre>

<p>}];
```</p>

<p>This simple guide has been helped by <a href="http://stackoverflow.com/questions/9927945/afnetworking-post-to-rest-webservice">this</a>, <a href="http://stackoverflow.com/questions/9275333/afnetworking-post-request-with-application-x-www-form-urlencoded">this</a> and <a href="http://stackoverflow.com/questions/8468065/is-there-an-example-of-afhttpclient-posting-json-with-afnetworking">this</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error: Application Executable Missing Required Architecture]]></title>
    <link href="http://samwize.github.com/2012/10/23/error-application-executable-missing-required-architecture/"/>
    <updated>2012-10-23T22:20:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/23/error-application-executable-missing-required-architecture</id>
    <content type="html"><![CDATA[<p>I swear this is the most common error I have seen whenever I upload an iOS binary.</p>

<blockquote><p>Error: application executable is missing a required architecture armv6</p></blockquote>

<p>It occurs every time after Apple release a new iPhone (or architecture type).</p>

<!-- more -->


<p>In 2011, when I was using Xcode 4.2, when I think iPhone 4 was out, I need to <a href="http://stackoverflow.com/a/8538393/242682">change</a> the Architectures settings from <code>armv7</code> to <code>armv6 armv7</code>.</p>

<p>There is another similar due to to "no architectures to compile for" which you can <a href="http://stackoverflow.com/a/5294634/242682">solve</a> by changing <code>VALID_ARCHS</code>.</p>

<p>Now in 2012, with Xcode 4.5, with the new iPhone 5, and the phasing out of armv6 (used in the old generation of iPod and iPhone), it once again introduced the error.</p>

<p>This time, you have to <a href="http://stackoverflow.com/a/12524366/242682">set</a> the deployment target to at least iOS 4.3.</p>

<p>Well done Apple.</p>
]]></content>
  </entry>
  
</feed>
