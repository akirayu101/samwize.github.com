<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenCV | Junda Ong]]></title>
  <link href="http://samwize.com/blog/categories/opencv/atom.xml" rel="self"/>
  <link href="http://samwize.com/"/>
  <updated>2013-06-13T21:45:14+08:00</updated>
  <id>http://samwize.com/</id>
  <author>
    <name><![CDATA[Junda]]></name>
    <email><![CDATA[junda@just2us.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using OpenCV to match template multiple times]]></title>
    <link href="http://samwize.com/2013/06/09/using-opencv-to-match-template-multiple-times/"/>
    <updated>2013-06-09T02:15:00+08:00</updated>
    <id>http://samwize.com/2013/06/09/using-opencv-to-match-template-multiple-times</id>
    <content type="html"><![CDATA[<p>OpenCV has a <a href="http://opencv.itseez.com/modules/imgproc/doc/object_detection.html?highlight=matchtemplate#matchtemplate">matchTemplate</a> function that let you seach for matches between an image and a given template.</p>

<!-- more -->


<p>There is a <a href="http://docs.opencv.org/doc/tutorials/imgproc/histograms/template_matching/template_matching.html#template-matching">tutorial</a> on that.</p>

<p>However, the tutorial falls short. It only explain how to match 1 occurence.</p>

<p>I know the answer is somewhere in the <code>result</code>.. But I am a newbie and cannot figure out. Do are <a href="http://answers.opencv.org/question/11180/template-matching-with-multiple-occurance/">others</a>.</p>

<p>I found the best answer from: <a href="http://opencv-code.com/quick-tips/how-to-handle-template-matching-with-multiple-occurences/">OpenCV-Code.com</a></p>

<p>The genius part of the code is that it finds a match with <code>minMaxLoc</code>, then it <code>floodFill</code> it. Then it can repeat.</p>

<p>I have used it for an iOS project to count the number of matching templates. Here's the code:</p>

<p>```cpp
// Returns number of matching templates
+ (int)matchTemplate:(UIImage<em>)templateImage in:(UIImage</em>)src {</p>

<pre><code>// http://opencv-code.com/quick-tips/how-to-handle-template-matching-with-multiple-occurences/
cv::Mat ref = [src CVMat];
cv::Mat tpl = [templateImage CVMat];
cv::Mat gref, gtpl;
cv::cvtColor(ref, gref, CV_BGR2GRAY);
cv::cvtColor(tpl, gtpl, CV_BGR2GRAY);

cv::Mat res(ref.rows-tpl.rows+1, ref.cols-tpl.cols+1, CV_32FC1);
cv::matchTemplate(gref, gtpl, res, CV_TM_CCOEFF_NORMED);
cv::threshold(res, res, 0.9, 1., CV_THRESH_TOZERO);

int count = 0;
while (true)
{
    double minval, maxval, threshold = 0.9;
    cv::Point minloc, maxloc;
    cv::minMaxLoc(res, &amp;minval, &amp;maxval, &amp;minloc, &amp;maxloc);

    if (maxval &gt;= threshold)
    {
        cv::rectangle(
                      ref,
                      maxloc,
                      cv::Point(maxloc.x + tpl.cols, maxloc.y + tpl.rows),
                      CV_RGB(0,255,0), 2
                      );
        cv::floodFill(res, maxloc, cv::Scalar(0), 0, cv::Scalar(.1), cv::Scalar(1.));
        count++;
    }
    else
        break;
}

NSLog(@"# of matches: %d", count);

return count;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
