<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Junda Ong]]></title>
  <link href="http://samwize.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://samwize.com/"/>
  <updated>2012-12-07T23:59:59+08:00</updated>
  <id>http://samwize.com/</id>
  <author>
    <name><![CDATA[Junda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Phewtick API - Message to any user you want]]></title>
    <link href="http://samwize.com/2012/11/29/phewtick-api-message-to-any-user/"/>
    <updated>2012-11-29T22:18:00+08:00</updated>
    <id>http://samwize.com/2012/11/29/phewtick-api-message-to-any-user</id>
    <content type="html"><![CDATA[<p>I wrote a <a href="https://github.com/samwize/phewtick-hack">Phewtick Hack</a> a few days ago.</p>

<p><img src="http://www.phewtick.com/img/home_main.png" title="Phewtick" ></p>

<p>It started out as a hack via their RESTful API to automatically scan QR code and get Phewtick points ($$$).</p>

<p>Today, Phewtick released a new <a href="https://itunes.apple.com/sg/app/phewtick/id487158487?mt=8">version 3.2.0</a>, which includes 2 new features: timeline and messaging.</p>

<p>I took a look at their API (again)..</p>

<!-- more -->


<p>Shockingly,</p>

<ul>
<li><p>The timeline shows not only the friends I met with, but also the friends that my friends met with!</p></li>
<li><p>The messaging API allows me to send to anyone!</p></li>
</ul>


<p>This <a href="https://github.com/samwize/phewtick-hack">python code</a> will allow you to spam Phewtick user id 123456.</p>

<p><code>python
from phew import *
message(0, 123456, "Meow~")
</code></p>

<p>I could easily spam everyone in Phewtick with 2 lines of code.</p>

<p>```python
for id in range(0,1000000):</p>

<pre><code>message(0, id, "Meow~")
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Unit Testing with nosetests]]></title>
    <link href="http://samwize.com/2012/11/12/python-unit-testing-with-nosetests/"/>
    <updated>2012-11-12T22:52:00+08:00</updated>
    <id>http://samwize.com/2012/11/12/python-unit-testing-with-nosetests</id>
    <content type="html"><![CDATA[<p><a href="http://nose.readthedocs.org/en/latest">nosetests</a> is Python favorite unit testing framework.</p>

<p>It helps to collect tests from functions that has the word <code>test</code>, or subclasses from <code>unittest.TestCase</code>, etc.. Learn the <a href="https://nose.readthedocs.org/en/latest/writing_tests.html">different ways</a> that you can write test cases.</p>

<!-- more -->


<h2>How to use</h2>

<p>Install,</p>

<pre><code>sudo pip install nose
</code></pre>

<p>Then run,</p>

<pre><code>nosetests
</code></pre>

<p>nosetests will automatically find tests to run in your project! Not necessary in /tests directory (but recommended).</p>

<p>To print out the output,</p>

<pre><code>nosetests --nocapture
</code></pre>

<p>To run only certain tests,</p>

<pre><code>nosetests &lt;path/to/file&gt;:&lt;Test_Case&gt;.&lt;test_method&gt;
nosetests test_web.py:TestWeb.test_checkout
</code></pre>

<p>To run a test file,</p>

<pre><code>nosetests test_web.py
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Python's Lambda and Closure]]></title>
    <link href="http://samwize.com/2012/11/05/what-is-pythons-lambda-and-closure/"/>
    <updated>2012-11-05T20:06:00+08:00</updated>
    <id>http://samwize.com/2012/11/05/what-is-pythons-lambda-and-closure</id>
    <content type="html"><![CDATA[<p>Lambda is</p>

<blockquote><p>one line anonymous function constructed on the fly</p></blockquote>

<p>Closure is</p>

<blockquote><p>a function object that remembers values in enclosing scopes regardless of whether those scopes are still present in memory</p></blockquote>

<!-- more -->


<h2>What is Lambda?</h2>

<p><a href="http://www.diveintopython.net/power_of_introspection/lambda_functions.html">DiveIntoPython</a> gave a good definition. Lambda is</p>

<ul>
<li>a one line function</li>
<li>anonymous function (no name)</li>
<li>a function that can be used anywhere a function is required</li>
<li>it takes in arbitrary parameters</li>
<li>and implicitly return as a single expression</li>
</ul>


<p>But most important, you need not use lambda.</p>

<p>Lambda is a <strong>style</strong>. You need not use it.</p>

<p>What's more, if you need multiple lines, then consider a normal function. Python can pass function as parameter anyway.</p>

<h2>Why do we have Lambda?</h2>

<p>You might <a href="http://stackoverflow.com/questions/890128/python-lambda-why">wonder</a> why is there lambda in the first place.</p>

<p>This post on <a href="http://python-history.blogspot.sg/2009/04/origins-of-pythons-functional-features.html">Python history</a> explained well.</p>

<blockquote><p>In 1994, lambda operator was introduced for creating anonymous functions (as expressions). Lack of a better choice..</p></blockquote>

<p>However, the choice of the terminology "lambda" had many unintended consequences. It doesn't match the expectation from other languages. Hence it is usually considered "sorely lacking" in features. eg. It does not work with surrounding codes.</p>

<p>Lambda is no closure like other languages.</p>

<h2>What is Closure?</h2>

<p>Best explained in <a href="http://www.shutupandship.com/2012/01/python-closures-explained.html">ShutUpAndShip</a>,</p>

<blockquote><p>A CLOSURE is a function object that remembers values in enclosing scopes regardless of whether those scopes are still present in memory.</p></blockquote>

<p>In another shorter <a href="http://ynniv.com/blog/2007/08/closures-in-python.html">explanation</a>,</p>

<blockquote><p>A closure is data attached to code</p></blockquote>

<p>In Python,</p>

<ul>
<li>Methods are closures</li>
<li>Functions are NOT closures</li>
<li>Lambda is NOT closure</li>
</ul>


<h2>Huh? Method vs Function</h2>

<p>In case you wonder what is the difference between <a href="http://stackoverflow.com/a/155633/242682">Method &amp; Function</a>,</p>

<blockquote><p>A method is on an object. A function is independent of an object.</p></blockquote>

<p>You define a <strong>function</strong> such as <code>def foo():</code>.</p>

<p>You use a <strong>method</strong> of an object such as <code>obj.foo()</code>. <code>obj</code> is implicitly passed as the first parameter to the method <code>foo</code>. That's why in a class, you have a <code>self</code> as the first param of a <em>method</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to write Getter/Setter for static variables]]></title>
    <link href="http://samwize.com/2012/09/20/how-to-write-getter-slash-setter-for-static-variables/"/>
    <updated>2012-09-20T14:14:00+08:00</updated>
    <id>http://samwize.com/2012/09/20/how-to-write-getter-slash-setter-for-static-variables</id>
    <content type="html"><![CDATA[<p>In the last post, I blogged about how you should write <a href="/2012/09/19/how-you-should-write-getter-slash-setter-for-python/">Getter/Setter for member variables</a>.</p>

<p>This is a follow-up for <strong>static variables</strong>, instead of instance variables.</p>

<!-- more -->


<p>I didn't know the answer to that, until I searched around <a href="http://stackoverflow.com/questions/128573/using-property-on-classmethods">Stackoverflow</a>. There are a couple of ways around using @property on classmethods.</p>

<p>The best answer for me is this:</p>

<p>``` python
class MyClass(object):</p>

<pre><code>_foo = 5
class __metaclass__(type):
    @property
    def foo(cls):
            return cls._foo

    @foo.setter
    def foo(cls, value):
            cls._foo = value
</code></pre>

<p>```</p>

<p>It uses <code>__metaclass__</code>, some kind of <a href="http://www.voidspace.org.uk/python/articles/five-minutes.shtml">black magic</a> in Python.</p>

<p>With that, you can use the getter/setter on the static variable.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>MyClass.foo
5
MyClass.foo = 3
MyClass.foo
3
```</p></blockquote></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How you should write getter/setter for Python]]></title>
    <link href="http://samwize.com/2012/09/19/how-you-should-write-getter-slash-setter-for-python/"/>
    <updated>2012-09-19T18:49:00+08:00</updated>
    <id>http://samwize.com/2012/09/19/how-you-should-write-getter-slash-setter-for-python</id>
    <content type="html"><![CDATA[<p>Coming from the Java world, I am used to writing getter/setter for every member variables that I want to expose. (truth is I made use of IDE to auto generate)</p>

<p>I hate how much code Java has.</p>

<p>With it's philosophy of readable code, Python is different.</p>

<!-- more -->


<h3>Getter</h3>

<p>To write a getter for this member <code>foo</code>:</p>

<p>``` python
class MyClass(object):</p>

<pre><code>def __init__(self):
    self._foo = 1

@property
def foo(self):
    return self._foo
</code></pre>

<p>```</p>

<p>It uses an annotation <code>@property</code>. Then to access the property:</p>

<p>``` python
my_class = MyClass()
print my_class.foo</p>

<h1>1</h1>

<p>```</p>

<h3>Setter</h3>

<p>To set a memter, use the annotation <code>@foo.setter</code> (replace foo with your member name).</p>

<p>``` python
class MyClass(object):</p>

<pre><code>...

@foo.setter
def foo(self, value):
    self._foo = value
</code></pre>

<p>```</p>

<!-- http://stackoverflow.com/questions/6618002/python-property-versus-getters-and-setters -->

]]></content>
  </entry>
  
</feed>
