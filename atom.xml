<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Junda Ong]]></title>
  <link href="http://samwize.github.com/atom.xml" rel="self"/>
  <link href="http://samwize.github.com/"/>
  <updated>2012-11-05T20:27:33+08:00</updated>
  <id>http://samwize.github.com/</id>
  <author>
    <name><![CDATA[Junda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is Python's Lambda and Closure]]></title>
    <link href="http://samwize.github.com/2012/11/05/what-is-pythons-lambda-and-closure/"/>
    <updated>2012-11-05T20:06:00+08:00</updated>
    <id>http://samwize.github.com/2012/11/05/what-is-pythons-lambda-and-closure</id>
    <content type="html"><![CDATA[<p>Lambda is</p>

<blockquote><p>one line anonymous function constructed on the fly</p></blockquote>

<p>Closure is</p>

<blockquote><p>a function object that remembers values in enclosing scopes regardless of whether those scopes are still present in memory</p></blockquote>

<!-- more -->


<h2>What is Lambda?</h2>

<p><a href="http://www.diveintopython.net/power_of_introspection/lambda_functions.html">DiveIntoPython</a> gave a good definition. Lambda is</p>

<ul>
<li>a one line function</li>
<li>anonymous function (no name)</li>
<li>a function that can be used anywhere a function is required</li>
<li>it takes in arbitrary parameters</li>
<li>and implicitly return as a single expression</li>
</ul>


<p>But most important, you need not use lambda.</p>

<p>Lambda is a <strong>style</strong>. You need not use it.</p>

<p>What&#8217;s more, if you need multiple lines, then consider a normal function. Python can pass function as parameter anyway.</p>

<h2>Why do we have Lambda?</h2>

<p>You might <a href="http://stackoverflow.com/questions/890128/python-lambda-why">wonder</a> why is there lambda in the first place.</p>

<p>This post on <a href="http://python-history.blogspot.sg/2009/04/origins-of-pythons-functional-features.html">Python history</a> explained well.</p>

<blockquote><p>In 1994, lambda operator was introduced for creating anonymous functions (as expressions). Lack of a better choice..</p></blockquote>

<p>However, the choice of the terminology &#8220;lambda&#8221; had many unintended consequences. It doesn&#8217;t match the expectation from other languages. Hence it is usually considered &#8220;sorely lacking&#8221; in features. eg. It does not work with surrounding codes.</p>

<p>Lambda is no closure like other languages.</p>

<h2>What is Closure?</h2>

<p>Best explained in <a href="http://www.shutupandship.com/2012/01/python-closures-explained.html">ShutUpAndShip</a>,</p>

<blockquote><p>A CLOSURE is a function object that remembers values in enclosing scopes regardless of whether those scopes are still present in memory.</p></blockquote>

<p>In another shorter <a href="http://ynniv.com/blog/2007/08/closures-in-python.html">explanation</a>,</p>

<blockquote><p>A closure is data attached to code</p></blockquote>

<p>In Python,</p>

<ul>
<li>Methods are closures</li>
<li>Functions are NOT closures</li>
<li>Lambda is NOT closure</li>
</ul>


<h2>Huh? Method vs Function</h2>

<p>In case you wonder what is the difference between <a href="http://stackoverflow.com/a/155633/242682">Method &amp; Function</a>,</p>

<blockquote><p>A method is on an object. A function is independent of an object.</p></blockquote>

<p>You define a <strong>function</strong> such as <code>def foo():</code>.</p>

<p>You use a <strong>method</strong> of an object such as <code>obj.foo()</code>. <code>obj</code> is implicitly passed as the first parameter to the method <code>foo</code>. That&#8217;s why in a class, you have a <code>self</code> as the first param of a <em>method</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Accessibility Guide for Developers]]></title>
    <link href="http://samwize.github.com/2012/11/04/ios-accessibility-guide-for-developers/"/>
    <updated>2012-11-04T18:25:00+08:00</updated>
    <id>http://samwize.github.com/2012/11/04/ios-accessibility-guide-for-developers</id>
    <content type="html"><![CDATA[<p>There are some simple steps you can take to make your iOS app friendly to the visually impaired users. All you need is to provide more meaningful labels and iOS VoiceOver will take care of it.</p>

<p>I am guilty that I didn&#8217;t take these simple steps whenever I release a new app, even though I know about it since iOS 3.. Sometimes, I need a <a href="http://mattgemmell.com/2012/10/26/ios-accessibility-heroes-and-villains/">reminder</a>.</p>

<p>Treat this post as <em>another reminder</em>. And as a guide.</p>

<!-- more -->


<h2>Test with Accessibility Inspector</h2>

<p>In <strong>iOS Simulator</strong> (NOT actual device), go to Settings > General > Accessibility and switch it on.</p>

<p>You may now observe accessibility information for each UI element.</p>

<h2>Define in Interface Builder</h2>

<p>If you are using IB to build your UI, you can easily edit from the Identity Inspector. All <code>UIView</code> comes with accessibility attributes.</p>

<p><img src="http://samwize.github.com/images/xcode-accessibility-inspector.png" title="Accessibility Inspector" ></p>

<ul>
<li>Enable Accessibility</li>
<li>Enter a label. This is what will be read with VoiceOver.</li>
<li>Enter a hint, if the label could be ambiguous.</li>
</ul>


<h2>Change Programmatically</h2>

<p>You can also change the label and hint programmatically.</p>

<p>If you have a <code>UILabel</code>, it will read the text of the label. However if that is not descriptive, you could</p>

<pre><code>mylabel.accessibilityLabel = @"Play the music";
mylabel.accessibilityHint = @"Play the music right now";
</code></pre>

<h2>UITableViewCell</h2>

<p>It is most likely a table view cell is made up of a couple of UI elements. However, it would be difficult to select the individual elements.</p>

<p>Hence you could help be aggregating the labels and set the <code>UITableCellView</code> accessibility options.</p>

<h2>UISlider</h2>

<p>For slider, you may also want to set the value.</p>

<pre><code>mySlider.accessibilityValue = @"Volume at 50%";
</code></pre>

<h2>Test on Device</h2>

<p>Go to Settings > General > Accessibility > Enable VoiceOver.</p>

<p>Test it out!</p>

<h2>Advanced</h2>

<p>I have merely list the <em>simple</em> steps I usually used.</p>

<p>Apple has it&#8217;s own <a href="http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/iPhoneAccessibility/Making_Application_Accessible/Making_Application_Accessible.html#//apple_ref/doc/uid/TP40008785-CH102-SW5">complete guide</a> on how you should approach the topic, including custom views and <code>UIAccessibilityPostNotification</code>. <a href="http://mattgemmell.com/2010/12/19/accessibility-for-iphone-and-ipad-apps/">Matt Gemmell</a> also covers the topic.</p>

<p>Hope you be a hero!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Mythical Team-Month]]></title>
    <link href="http://samwize.github.com/2012/11/03/the-mythical-team-month/"/>
    <updated>2012-11-03T21:22:00+08:00</updated>
    <id>http://samwize.github.com/2012/11/03/the-mythical-team-month</id>
    <content type="html"><![CDATA[<p>I came across this great slideshow about projects, teams and developers.</p>

<script async class="speakerdeck-embed" data-id="4f5ba2cfe593e10022020dbb" data-ratio="1.3333333333333333" src="http://samwize.github.com//speakerdeck.com/assets/embed.js"></script>


<p>Some of the ideas are similar to <a href="http://samwize.github.com/2012/10/11/the-lean-startup/">The Lean Startup</a>.</p>

<p>Other key takeaways for me are:</p>

<!-- more -->


<h2>Consensus &amp; Feedback</h2>

<ul>
<li><p>Healthy agile teams <strong>run on consensus</strong></p></li>
<li><p>Consensus doesn&#8217;t scale. More people = More connections. O(n<sup>2)</sup> Problem.</p></li>
<li><p>Consensus corrects for the team&#8217;s needs</p></li>
<li><p>Feedback corrects for the user&#8217;s needs</p></li>
<li><p>Consensus &amp; Feedback => <strong>Competes for the same resources!</strong></p></li>
</ul>


<h2>A Great Developer</h2>

<ul>
<li><p>Empathetic = Defend users by adpoting their perspective</p></li>
<li><p>Analytical = Break down large problems</p></li>
<li><p>Visionary = Identify great ideas and simplify</p></li>
<li><p>Scientific = Methodically attacks problems</p></li>
<li><p>Creative = Dreams up new ideas</p></li>
<li><p>Professional = Invests in long-term value &amp; maintainability</p></li>
<li><p>Entrepreneurial = Kills failing projects</p></li>
<li><p>Hungry = Relentlessly improves through learning, practicing and sharing</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Git Usage]]></title>
    <link href="http://samwize.github.com/2012/10/30/common-git-usage/"/>
    <updated>2012-10-30T21:35:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/30/common-git-usage</id>
    <content type="html"><![CDATA[<p>I am never good at using Git.</p>

<p>But it&#8217;s not my fault. Git has too many commands, and I am not a command line guy. That&#8217;s why I usually use <a href="http://www.syntevo.com/smartgit/index.html">SmartGit</a>, a Git software with user interface that supports Mac.</p>

<p>However, there are times when you have to run on the command line (eg. scripting or you just want to be <em>real fast</em>).</p>

<p>These are my common use cases during development work flow. I don&#8217;t cover <a href="http://ndpsoftware.com/git-cheatsheet.html">everything</a>, or advanced stuff.</p>

<!-- more -->


<h2>Push an existing repos to Github</h2>

<p>Assuming you have a repos on github already, issue the following <a href="https://gist.github.com/868939">commands</a>:</p>

<pre><code>cd existing_git_repo
git remote add origin git@github.com:[user]/[reponame].git
git push -u origin master
</code></pre>

<h2>Setup Github to remember password</h2>

<p>The <a href="https://help.github.com/articles/set-up-git">instructions</a>. Basically,</p>

<pre><code>git config --global user.name "Your Name Here"
git config --global user.email "your_email@youremail.com"
</code></pre>

<p>Then download and setup <code>git-credential-osxkeychain</code>.</p>

<pre><code>curl -s -O http://github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain
chmod u+x git-credential-osxkeychain
</code></pre>

<p>Issue a <code>which git</code> and note the path of git. Assuming it is <code>/usr/bin/git</code>, you have have to move to <code>/usr/bin/</code> (IMPORTANT: less the git part!).</p>

<pre><code>sudo mv git-credential-osxkeychain /usr/bin/
</code></pre>

<h2>On Color Options</h2>

<p>One of the most important <a href="http://git-scm.com/book/en/Customizing-Git-Git-Configuration">configuration</a></p>

<pre><code>git config --global color.ui true
</code></pre>

<p>With that, commands like <code>git diff</code> and <code>git log -p</code> looks better</p>

<h1>What&#8217;s changed</h1>

<p>Sometimes, you want to see what are the changes in your working directory (compared to HEAD/the last commit).</p>

<pre><code>git diff somefile.py
</code></pre>

<p>Or you want to see what are the overall changes between the last 2 commits</p>

<pre><code>git whatchanged -n 1
</code></pre>

<p>Then the actual code changes</p>

<pre><code> git log -p somefile.py
</code></pre>

<h2>Added new files, Updated changes, or Deleted files</h2>

<p>If you have added new files or updated tracked files</p>

<pre><code>git add .
</code></pre>

<p>If you have deleted files or updated tracked files</p>

<pre><code>git add -u
</code></pre>

<p>You could do both in a single step</p>

<pre><code>git add -A
</code></pre>

<h2>What are my remotes/branches</h2>

<p>To know,</p>

<pre><code>cat .git/config
</code></pre>

<p>Or you can <a href="http://gitref.org/remotes/">list</a> the remotes</p>

<pre><code>git remote -v
</code></pre>

<h2>Update your repos</h2>

<p>It&#8217;s a 2 step process. First you fetch the changes from a remote named <code>origin</code></p>

<pre><code>git fetch origin
</code></pre>

<p>Then you merge a branch <code>master</code> to local</p>

<pre><code>git merge origin/master
</code></pre>

<p>Or Simply</p>

<pre><code>git pull origin master
</code></pre>

<p>If <code>origin</code> is a default remote and &#8216;master&#8217; is default branch, you can drop it eg. <code>git pull</code>.</p>

<h2>Fix merge conflicts</h2>

<p>This always happen when you work in teams. A very <a href="http://stackoverflow.com/questions/161813/how-do-i-fix-merge-conflicts-in-git">commmon</a> question.</p>

<p>It usually goes like this.. You tried to update</p>

<pre><code>git fetch
git pull
... not uptodate. Cannot merge.
</code></pre>

<p>So you commit your local changes</p>

<pre><code>git add .
git commit -m "some changes"
...
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>So you need to resolve the conflict</p>

<pre><code>git mergetool -y
</code></pre>

<p>At this point you use the GUI (eg FileMerge) to resolve the conflicts and save. Then you commit</p>

<pre><code>git add .
git commit -m "fixed conflicts"
git push
</code></pre>

<p>Done!</p>

<h2>Revert a file during merge conflict</h2>

<p>Say when you have a merge conflict, you know it should just take your file,</p>

<pre><code>git checkout --ours filename.c
</code></pre>

<p>Or if you know yit should be their file,</p>

<pre><code>git checkout --theirs filename.c
</code></pre>

<h2>Tagging</h2>

<p>Useful when you want to <a href="http://git-scm.com/book/en/Git-Basics-Tagging">tag a version</a>.</p>

<pre><code>git tag -a v1.2
</code></pre>

<p>If you want to push to the tag, it works similarly like a branch.</p>

<pre><code>git push origin v1.2
</code></pre>

<h2>Delete a commit that has been pushed</h2>

<p>This is usually when you accidentally commit <a href="http://stackoverflow.com/questions/1338728/how-to-delete-a-git-commit">wrongly</a>.</p>

<pre><code>git log
git reset --hard &lt;sha1-commit-id&gt;
git push origin HEAD --force
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Guide to Multiple Device Resolutions]]></title>
    <link href="http://samwize.github.com/2012/10/29/ios-guide-to-multiple-device-resolutions/"/>
    <updated>2012-10-29T23:23:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/29/ios-guide-to-multiple-device-resolutions</id>
    <content type="html"><![CDATA[<p>With every iOS updates and new release of devices from Apple, there are more things developers have to do.</p>

<p>In order to support these new devices, you first need to understand these devices.</p>

<!-- more -->


<h2>Device Resolutions</h2>

<p>Apple provides a <a href="http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/IconsImages/IconsImages.html#//apple_ref/doc/uid/TP40006556-CH14-SW1">table matrix</a> on the App Icons, Screen size, and tool bar icon sizes for the various devices.</p>

<table>
<thead>
<tr>
<th></th>
<th>             </th>
<th> iPhone 5        </th>
<th> iPhone (Retina)   </th>
<th> iPhone        </th>
<th> iPad (Retina) </th>
<th> iPad          </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> App Icon    </td>
<td> 114 x 114       </td>
<td> 114 x 114         </td>
<td> 57 x 57       </td>
<td> 144 x 144     </td>
<td> 72 x 72       </td>
</tr>
<tr>
<td></td>
<td> Default.png </td>
<td> 640 x 1136      </td>
<td> 640 x 960         </td>
<td> 320 x 480     </td>
<td> 1536 x 2008   </td>
<td> 768 x 1004    </td>
</tr>
<tr>
<td></td>
<td> Toolbar icon</td>
<td> 40 x 40         </td>
<td> 40 x 40           </td>
<td> 20 x 20       </td>
<td> 40 x 40       </td>
<td> 20 x 20       </td>
</tr>
</tbody>
</table>


<h2>Image Resource File</h2>

<p>Apple introduced an easy way to load <a href="http://developer.apple.com/library/ios/#documentation/2DDrawing/Conceptual/DrawingPrintingiOS/SupportingHiResScreensInViews/SupportingHiResScreensInViews.html#//apple_ref/doc/uid/TP40010156-CH15">images</a> automatically for the devices.</p>

<p>The rule goes like this:</p>

<ul>
<li><p>Standard: <code>&lt;ImageName&gt;&lt;device_modifier&gt;.&lt;filename_extension&gt;</code></p></li>
<li><p>High resolution: <code>&lt;ImageName&gt;@2x&lt;device_modifier&gt;.&lt;filename_extension&gt;</code></p></li>
</ul>


<p>For <a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/LoadingResources/ImageSoundResources/ImageSoundResources.html#//apple_ref/doc/uid/10000051i-CH7-SW1">example</a>,</p>

<ul>
<li>MyImage.png - Default version of an image resource.</li>
<li>MyImage@2x.png - High-resolution version of an image resource for devices with Retina displays.</li>
<li>MyImage~iphone.png - Version of an image for iPhone and iPod touch.</li>
<li>MyImage@2x~iphone.png - High-resolution version of an image for iPhone and iPod touch devices with Retina displays.</li>
<li>MyImage~ipad.png - Version of an image for iPad</li>
<li>MyImage@2x~ipad.png - High-resolution version of an image for iPad with Retina displays.</li>
</ul>


<p>With that knowledge, you could load a UIImage</p>

<pre><code>UIImage *anImage = [UIImage imageNamed:@"MyImage"];
</code></pre>

<p>and the appropriate resource file will be loaded.</p>

<h2>iPhone 5 - taller screen</h2>

<p>Unfortunately, for the taller iPhone 5, it does not automatically load <code>MyImage@2x~iphone5.png</code>.</p>

<p>You could use a <a href="http://stackoverflow.com/questions/5088945/use-2x-retina-images-for-ipad-in-universal-app-and-does-apple-prefer-native-ap">handy</a> UIImage category to load.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wifi Scanner for Mac OSX (Mountain Lion)]]></title>
    <link href="http://samwize.github.com/2012/10/28/wifi-scanner-for-mac-osx-mountain-lion/"/>
    <updated>2012-10-28T10:05:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/28/wifi-scanner-for-mac-osx-mountain-lion</id>
    <content type="html"><![CDATA[<p>Mountain Lion comes with a Wifi Scanner that is much better than you expected.</p>

<p>I tried out <a href="http://kismac-ng.org/">KisMAC</a> at first, but couldn&#8217;t get it working. I hate reading their lengthy <a href="http://trac.kismac-ng.org/wiki/NewbieGuide">newbie guide</a>.</p>

<p>Then I found a gem in Mountain Lion.</p>

<!-- more -->


<p>It turns out the Wi-Fi Diagnostics Tool (app) in Mountain Lion is updated with new features. It has added a wifi stumbler to discover the wifi nearbys (ssid, channel, protocols, etc).</p>

<p>To do a Wifi scan,</p>

<ol>
<li><p>Go to terminal and <code>open open /System/Library/CoreServices/Wi-Fi\ Diagnostics.app/</code></p></li>
<li><p>Go to <strong>File</strong> > <strong>Network Utilities</strong></p></li>
<li><p>Press Scan</p></li>
</ol>


<p><img src="http://samwize.github.com/images/wifi-scanner-mountain-lion.png" title="Scan Results" ></p>

<p>That&#8217;s it. You got to see the details of wifi nearby.</p>

<p>PS: I was looking for a uncongested, clear channel to use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple GET/POST AFNetworking]]></title>
    <link href="http://samwize.github.com/2012/10/25/simple-get-post-afnetworking/"/>
    <updated>2012-10-25T00:32:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/25/simple-get-post-afnetworking</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> is the choice for iOS/Mac developers when it comes to choosing a HTTP library.</p>

<p><a href="http://allseeing-i.com/ASIHTTPRequest/">ASIHTTPRequest</a> used to be the choice, until 2011 when it became inactive.</p>

<p>I am one of the many who is forced to switch camp.</p>

<!-- more -->


<p>In many ways, it seems AFNetworking would be better. It uses blocks!</p>

<p>However, I find the documentation lacking. It has an <a href="https://github.com/AFNetworking/AFNetworking">overview</a>, <a href="https://github.com/AFNetworking/AFNetworking/wiki/Getting-Started-with-AFNetworking">getting started</a>, <a href="https://github.com/AFNetworking/AFNetworking/wiki/Introduction-to-AFNetworking">introduction</a>, <a href="http://afnetworking.github.com/AFNetworking/">complete reference</a>, &#8230; But yet, it didn&#8217;t provide example on how you make a simple HTTP GET or POST.</p>

<p>Here is how you do it:</p>

<h2>GET</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">AFHTTPClient</span> <span class="o">*</span><span class="n">httpClient</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AFHTTPClient</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">NSMutableURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">httpClient</span> <span class="nl">requestWithMethod:</span><span class="s">@&quot;GET&quot;</span>
</span><span class='line'>                                                        <span class="nl">path:</span><span class="s">@&quot;http://samwize.com/api/pigs/&quot;</span>
</span><span class='line'>                                                  <span class="nl">parameters:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AFHTTPRequestOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithRequest:</span><span class="n">request</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">httpClient</span> <span class="nl">registerHTTPOperationClass:</span><span class="p">[</span><span class="n">AFHTTPRequestOperation</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">operation</span> <span class="nl">setCompletionBlockWithSuccess:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Print the response body in text</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Response: %@&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">responseObject</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="p">[</span><span class="n">operation</span> <span class="n">start</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>POST</h2>

<p>POST a urlencoded form <code>name=piggy</code> in the http body.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">AFHTTPClient</span> <span class="o">*</span><span class="n">httpClient</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AFHTTPClient</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">httpClient</span> <span class="nl">setParameterEncoding:</span><span class="n">AFFormURLParameterEncoding</span><span class="p">];</span>
</span><span class='line'><span class="n">NSMutableURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">httpClient</span> <span class="nl">requestWithMethod:</span><span class="s">@&quot;POST&quot;</span>
</span><span class='line'>                                                        <span class="nl">path:</span><span class="s">@&quot;http://samwize.com/api/pig/&quot;</span>
</span><span class='line'>                                                  <span class="nl">parameters:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;name&quot;</span><span class="o">:</span><span class="s">@&quot;piggy&quot;</span><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Similar to GET code ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to POST a json such as <code>{"name":"piggy"}</code>, you change the encoding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">httpClient</span> <span class="nl">setParameterEncoding:</span><span class="n">AFJSONParameterEncoding</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to do a multi-part POST of an image, you do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSMutableURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">httpClient</span> <span class="nl">multipartFormRequestWithMethod:</span><span class="s">@&quot;POST&quot;</span> <span class="nl">path:</span><span class="s">@&quot;http://samwize.com/api/pig/photo&quot;</span> <span class="nl">parameters:</span><span class="nb">nil</span> <span class="nl">constructingBodyWithBlock:</span> <span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">AFMultipartFormData</span><span class="o">&gt;</span><span class="n">formData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">formData</span> <span class="nl">appendPartWithFileData:</span><span class="n">imageData</span> <span class="nl">name:</span><span class="s">@&quot;avatar&quot;</span> <span class="nl">fileName:</span><span class="s">@&quot;avatar.jpg&quot;</span> <span class="nl">mimeType:</span><span class="s">@&quot;image/jpeg&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This simple guide has been helped by <a href="http://stackoverflow.com/questions/9927945/afnetworking-post-to-rest-webservice">this</a>, <a href="http://stackoverflow.com/questions/9275333/afnetworking-post-request-with-application-x-www-form-urlencoded">this</a> and <a href="http://stackoverflow.com/questions/8468065/is-there-an-example-of-afhttpclient-posting-json-with-afnetworking">this</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Strategy, Bad Strategy]]></title>
    <link href="http://samwize.github.com/2012/10/24/good-strategy-bad-strategy/"/>
    <updated>2012-10-24T22:02:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/24/good-strategy-bad-strategy</id>
    <content type="html"><![CDATA[<p>This is a review of the book <a href="http://www.bookdepository.co.uk/Good-Strategybad-Strategy-Richard-Rumelt/9781846684814?a_aid=Just2me">Good Strategy, Bad Strategy</a>.</p>

<p>The first 20% of the book is still okay. But I could not read beyond that, as it is long winded, and used too many examples from US Military strategies.</p>

<p>Nonetheless, here&#8217;s what I learnt:</p>

<!-- more -->


<h3>The Problem</h3>

<p>Definition of Strategy - We don&#8217;t really understand it.</p>

<p>Confused, and &#8220;strategy&#8221; became a verbal tic. eg. IT Strategy, Low-price Strategy, &#8230;</p>

<p>A word that can mean anything has lost its bite.</p>

<p>We need a redefintion. A real understanding of Strategy.</p>

<h3>Core of strategy work</h3>

<p>= Discover critical factor in a situation + Design a way of coordinating and focusing actions
= Recognise Challenges + Approach to overcome them</p>

<p>A <strong>leader&#8217;s most important responsibility</strong> is working on strategy.</p>

<p>Mastering the shift from others defining your goals, to being the architect of the organisation purposes and objectives.</p>

<h3>A good strategy</h3>

<ul>
<li><p>Selects the path, identifying the how, why and where leadership and determination are to be applied</p></li>
<li><p>Say &#8220;NO&#8221; to wide variety of actions and interests</p></li>
<li><p>It&#8217;s as much as what an organisation does not do, as what it does</p></li>
</ul>


<p>Why so much bad strategy?</p>

<p>Strategy involves focus, and choice; Most people have unwillness or inability to choose</p>

<h3>Kernel</h3>

<p>A logical structure:</p>

<p>1) Diagnosis - Simplify and identify the critical</p>

<p>2) Guiding policy - Overall approach</p>

<p>3) Coherent actions - Steps that work together</p>

<p>Example (Apple by Steve Jobs in 1998):</p>

<blockquote><p>Challenge: Product lineup was too complicated. Too many price points and too much markup.</p>

<p>Action: Cut all except 1 laptop, Cut distributors, Cut development</p></blockquote>

<p>When PC is dominated by Microsoft, Apple Strategy is &#8220;to wait for the next big thing&#8221;</p>

<p>Apple eventually released the iPhone</p>

<h3>What I didn&#8217;t read..</h3>

<p>After finished Part I, I merely browsed Part II and III..</p>

<p>Part II - Sources of Power - I don&#8217;t read. Not necessary. Using leverage, advantage, dynamics, focus, growth, etc..</p>

<p>Part III - Not sure what&#8217;s the conclusion</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error: Application Executable Missing Required Architecture]]></title>
    <link href="http://samwize.github.com/2012/10/23/error-application-executable-missing-required-architecture/"/>
    <updated>2012-10-23T22:20:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/23/error-application-executable-missing-required-architecture</id>
    <content type="html"><![CDATA[<p>I swear this is the most common error I have seen whenever I upload an iOS binary.</p>

<blockquote><p>Error: application executable is missing a required architecture armv6</p></blockquote>

<p>It occurs every time after Apple release a new iPhone (or architecture type).</p>

<!-- more -->


<p>In 2011, when I was using Xcode 4.2, when I think iPhone 4 was out, I need to <a href="http://stackoverflow.com/a/8538393/242682">change</a> the Architectures settings from <code>armv7</code> to <code>armv6 armv7</code>.</p>

<p>There is another similar due to to &#8220;no architectures to compile for&#8221; which you can <a href="http://stackoverflow.com/a/5294634/242682">solve</a> by changing <code>VALID_ARCHS</code>.</p>

<p>Now in 2012, with Xcode 4.5, with the new iPhone 5, and the phasing out of armv6 (used in the old generation of iPod and iPhone), it once again introduced the error.</p>

<p>This time, you have to <a href="http://stackoverflow.com/a/12524366/242682">set</a> the deployment target to at least iOS 4.3.</p>

<p>Well done Apple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating App for iPhone 5]]></title>
    <link href="http://samwize.github.com/2012/10/22/updating-app-for-iphone-5/"/>
    <updated>2012-10-22T01:14:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/22/updating-app-for-iphone-5</id>
    <content type="html"><![CDATA[<p>This post is a guide to updating existing app for iPhone 5.</p>

<p>As you already knew, the new iPhone 5 introduced a taller screen at 4 inch, while all iPhones before is at 3.5 inch.</p>

<p>There are a couple of steps that you have to do to support the taller screen, and it really depends on how you develop your app in the first place. You might use all of the techniques below, or none.</p>

<p>These techniques are inspired by <a href="http://stackoverflow.com/questions/12395200/how-to-develop-or-migrate-apps-for-iphone-5-screen-resolution">answers</a> <a href="http://stackoverflow.com/questions/12518879/extend-app-for-iphone-5-best-practice">on</a> <a href="http://stackoverflow.com/questions/12519110/what-to-name-images-for-iphone-5-screen-size">Stackoverflow</a>. The result is a <code>Device</code> class I created at <a href="https://gist.github.com/3926123">https://gist.github.com/3926123</a></p>

<!-- more -->


<h2>1. Default-568h@2x.png</h2>

<p>There isn&#8217;t a setting to specify a project supports iPhone 5. Instead, a presence of a <code>Default-568h@2x.png</code> signify that it supports iPhone 5.</p>

<p>The size is 640 x 1136.</p>

<p>Xcode 4.5 will actually offer to add one automatically.</p>

<h2>2. Code to detect 4-inch screen</h2>

<p>You can detect the 4-inch screen size with the following method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/** Returns true if it is a iPhone/iPod with 4 inch tall screen */</span>
</span><span class='line'><span class="k">+</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isScreen4Inch</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">UI_USER_INTERFACE_IDIOM</span><span class="p">()</span> <span class="o">==</span> <span class="n">UIUserInterfaceIdiomPhone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGRect</span> <span class="n">screenBounds</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">screenBounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">==</span> <span class="mi">568</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have this in <code>Device.h</code>, so import and use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">Device</span> <span class="n">isScreen4Inch</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Code for 4 inch</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Code for anything else (3.5 inch or iPad)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. Use Auto Layout for iOS6</h2>

<p>If you are supporting only iOS6 and above, you should use Auto Layout.</p>

<p>You can read up a tutorial by <a href="http://www.raywenderlich.com/20881/beginning-auto-layout-part-1-of-2">Ray Wenderlich</a>.</p>

<h2>4. Set auto resizing mask for pre iOS6</h2>

<p>If you are still supporting pre iOS6, you still need auto resizing mask for your views to stretch and re-position automatically.</p>

<p>Refer to <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/uiview/uiview.html">Apple UIView doc</a> on <code>UIViewAutoresizing</code>.</p>

<p>This &#8216;feature&#8217; was in iOS ever since iOS is available. If you design your apps mostly using Xcode Interface Builder, this would one of the most needed change.</p>

<p>You could change a subview to auto resize its width/height, and fix it&#8217;s margin to left/right/top/bottom.</p>

<h2>5. Stretch Images</h2>

<p>If you are using Xcode Interface Builder, change the UIImageView <code>mode</code> to <code>Scale to Fill</code> (or others).</p>

<p>Then change the <code>Stretching</code> properties. The values are a fraction of the image size. For example, X and Y are 0.5, and Width and Height are 0.1, it means stretch the portion of the image at center with 10% width and height.</p>

<p>Your images can also be <a href="http://mobiledevelopertips.com/user-interface/ios-5-uiimage-and-resizableimagewithcapinsets.html">stretched</a> with UIImage <code>resizableImageWithCapInsets:</code>.</p>

<p>But that works only if your image has portion that can be stretched without distortion. If it doesn&#8217;t, you have to create a new image <code>-568@2x</code> image, and use the trick covered next to load it automatically.</p>

<h2>6. Load -568h@2x images</h2>

<p>Unlike <code>@2x</code> which are loaded automatically for Retina Display, the <code>-568h@2x</code> are not loaded automatically for the taller iPhone (except the <code>Default-568h@2x.png</code>).</p>

<p>I use a convenient method below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">UIImage</span><span class="o">*</span><span class="p">)</span><span class="nf">imageNamedFor568h:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">imageName</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">Device</span> <span class="n">isScreen4Inch</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">imageNameFor568h</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@-568h.%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">imageName</span> <span class="n">stringByDeletingPathExtension</span><span class="p">],</span> <span class="p">[</span><span class="n">imageName</span> <span class="n">pathExtension</span><span class="p">]];</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="n">imageNameFor568h</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="n">imageName</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using category, I introduced the method for UIImage.</p>

<p>To use, I would have to change the methods <code>[UIImage imageName:@"foo.png"]</code> to <code>[UIImage imageNameFor568h:@"foo.png"]</code>.</p>

<h2>7. iOS Simulator</h2>

<p>To run and test on a 4 inch iPhone, select <strong>Hardware</strong> > <strong>Device</strong> > <strong>iPhone (Retina 4-inch)</strong>.</p>

<h2>8. Last words..</h2>

<p>It largely depends on how you code your existing apps.</p>

<p>Use the above techniques as needed, and handily use the <a href="https://gist.github.com/3926123">Device class</a> methods.</p>

<p>If you use any third party libraries, you would also need to update their libs with support for <code>armv7s</code> (a new architecture for iPhone5). Popular libs are already updated at this point of writing eg. Flurry, Google Admob, and other ad networks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I hate Scala]]></title>
    <link href="http://samwize.github.com/2012/10/19/why-i-hate-scala/"/>
    <updated>2012-10-19T21:44:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/19/why-i-hate-scala</id>
    <content type="html"><![CDATA[<p>I spent about 2 weeks using Scala, before concluding that I hate the language.</p>

<p>When I first wrote the first <a href="http://samwize.github.com/2012/10/07/a-short-scala-tutorial-for-java-developers/">beginner guide to Scala</a>, I was in awe, and yet feeling a tinge of uneasiness.</p>

<p>Then I spent a few days creating a Scala web application, resulting in a subsequent <a href="http://samwize.github.com/2012/10/15/scala-plus-play-development-guide/">random guide to Scala programming</a>.</p>

<p>After I am done with the project, I know I would not start another project in Scala at my own will.</p>

<!-- more -->


<p>There are many <a href="http://m-mansur-ashraf.blogspot.sg/2011/08/is-scala-really-too-complex-for-average_20.html">Scala</a> <a href="http://amplicate.com/hate/scala">haters</a>.</p>

<p>Here&#8217;s what I think:</p>

<ul>
<li><p>Scala is a powerful &amp; complex language.</p></li>
<li><p>You could have dozens of custom operators like <code>&lt;/&gt;</code>, and <code>=:=</code>. That makes understanding code very difficult. Take a look at the <a href="http://www.flotsam.nl/dispatch-periodic-table.html">dispatch</a> (HTTP) library.</p></li>
<li><p>Even simple usage requires explaining. There&#8217;s too many concepts.</p></li>
<li><p>Otherwise, it is a <a href="http://dispatch.databinder.net/">lack of explaining</a></p></li>
<li><p>You will be constantly figuring out the language syntax</p></li>
<li><p>Ecosystem not great; lack of support, docs</p></li>
</ul>


<p>It&#8217;s damn hard to read Scala code.</p>

<p>You can call me an average programmer for all I care. But let&#8217;s say I am average, and I can&#8217;t understand Scala, then Scala is not a universal language.</p>

<p>Reading a <a href="http://blog.joda.org/2011/11/real-life-scala-feedback-from-yammer.html">real life feedback from Yammer</a>, it worries me even more. Some other things they said:</p>

<ul>
<li><p>Major version releases is backward incompatible</p></li>
<li><p>High learning curve, slow to get productive</p></li>
<li><p>To increase performance: Don&#8217;t use for-loop, s.c.m/i.. wtf</p></li>
<li><p>Compared 2 codebases, consensus is Java. Hence they switched back.</p></li>
</ul>


<p>I like Python better. And I always like one of <a href="http://c2.com/cgi/wiki?PythonPhilosophy">Python design philosophy</a></p>

<blockquote><p>There should be one&#8211; and preferably only one &#8211;obvious way to do it.</p></blockquote>

<p>Scala has <em>too many ways</em>.</p>

<p>You will not be able to comprehend easily. Never.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Tutorial (Part II)]]></title>
    <link href="http://samwize.github.com/2012/10/18/scala-tutorial-part-ii/"/>
    <updated>2012-10-18T22:14:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/18/scala-tutorial-part-ii</id>
    <content type="html"><![CDATA[<p>This is a continuation to <a href="http://samwize.github.com/2012-10/07/a-short-scala-tutorial-for-java-developers">a short Scala tutorial</a> and <a href="2012/10/15/scala-plus-play-development-guide">Scala+Play Development Guide</a>.</p>

<p>During the development of a project using Typesafe Stack (Scala + Akka + Play!), I learnt quite a few things about Scala and the Play framework.</p>

<!-- more -->


<h2>Switch case statements</h2>

<p>You can do <a href="http://kerflyn.wordpress.com/2011/02/14/playing-with-scalas-pattern-matching/">switch statements</a> pattern matching. A simple <code>switch case</code> statement looks like this:</p>

<pre><code>n match {
    case 0 =&gt; println("Zero")
    case 1 =&gt; println("One")
    case n =&gt; println("It is " + n)
}
</code></pre>

<h2>What is sealed trait</h2>

<p>Use <a href="http://stackoverflow.com/questions/11203268/what-is-a-sealed-trait">sealed trait</a> as <code>enums</code></p>

<pre><code>sealed trait Answer
case object Yes extends Answer
case object No extends Answer
</code></pre>

<p>Add a folder to classpath (for reading files). Don&#8217;t have to put in src.</p>

<p>In Eclipse, right click, Build Path > Use As Source Folder</p>

<p>Folder will be in classpath. Access using</p>

<h2>Read a resource file in Scala Play! 2</h2>

<p>Let&#8217;s say you have a text file call <code>myfile.txt</code>. You should put in <code>/public</code> of your Play! project.</p>

<p>You can read the file with the following <a href="http://stackoverflow.com/questions/12825644/how-to-read-a-file-in-scala-with-play-2-0">code</a>:</p>

<pre><code>val is = Application.getClass().getResourceAsStream("/public/myfile.txt")    
val src = scala.io.Source.Source.fromInputStream(is)
val iter = src.getLine
for (s &lt;- iter)
    println(s)
</code></pre>

<h2>Accessing Global Object</h2>

<p>If you have an object that is initiated once when the app starts, you can put it in the <code>Global</code> object.</p>

<p>However, <code>Global</code> object is by default in a default package, and because it is in default package, it cannot be referenced/accessed by other packages.</p>

<p>The <a href="http://stackoverflow.com/questions/10440864/play-2-0-scala-accessing-global-object">workaround</a> is to move your Global object into a specific package, and change the <code>application.conf</code> file to</p>

<pre><code>global= my.packaged.Global
</code></pre>

<h2>Initializing a class</h2>

<p>There is differences between</p>

<pre><code>class Person(name:String)
</code></pre>

<p>and</p>

<pre><code>class Person(val name:String)
</code></pre>

<p>In the later (with <code>val</code> in the constructor), you can access <code>person.name</code>. For former does not. Very subtle difference until when I create my first class.</p>

<h2>Unit Testing with Specs</h2>

<p>Write your unit tests with <a href="http://www.playframework.org/documentation/2.0/ScalaTest">specs2</a>.</p>

<p>To run just 1 test:</p>

<pre><code>sbt test-only test.MySpec
</code></pre>

<h2>java.lang.OutOfMemoryError: PermGen space</h2>

<p>When <code>sbt run</code>, sometimes you would run into the error</p>

<pre><code>java.lang.OutOfMemoryError: PermGen space
</code></pre>

<p>To solve, you can</p>

<pre><code>brew info sbt
</code></pre>

<p>to look for a clue. Changing to 512M helps.</p>

<pre><code>export SBT_OPTS="-XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=512M"
</code></pre>

<p>As much as you could googled, <a href="http://javarevisited.blogspot.sg/2011/09/javalangoutofmemoryerror-permgen-space.html">some</a> solutions do not work.</p>

<h2>Split 1 line of code into multiple lines</h2>

<p>Something so simple does not work as you normally do in Java. For example, this would not compile:</p>

<pre><code>val s = "a"
    + "b"
</code></pre>

<p>This is because <code>+</code> is a method, and it needs to be on the same line as the member calling the method (that is &#8220;a&#8221;).</p>

<p>Instead, this will work:</p>

<pre><code>val s = "a" +
    "b"
</code></pre>

<p>Or you can use brackets..</p>

<pre><code>val s = ("a"
    + "b")
</code></pre>

<p>The same goes for calling methods with dot notation. This will not work:</p>

<pre><code>myClass.someMethod
    .anotherMethod
</code></pre>

<p>This will work:</p>

<pre><code>myClass.someMethod.
    anotherMethod
</code></pre>

<h2>Play! asText is tricky</h2>

<p><code>request.body.asText</code> is tricky. It could be None even when there is something.</p>

<p>Let&#8217;s same you POST some data, and you didn&#8217;t specify <code>Content-Type: application/x-www-form-urlencoded</code>.</p>

<p>Firstly, <code>request.body.asFormUrlEncoded</code> will be <code>None</code>. Okay, I understand that is because Play! is strict with missing content-type.</p>

<p>However, <code>request.body.asText</code> will be <code>None</code> too!</p>

<h2>A simple HTTP POST</h2>

<p><a href="http://dispatch.databinder.net/">Dispatch</a> is the most popular HTTP library for Scala. However, to me, it is difficult to understand, <a href="http://www.flotsam.nl/dispatch-periodic-table.html">cryptic</a>, and with poor documentation.</p>

<p>It took me a while to find a <a href="http://stackoverflow.com/questions/12342062/basic-usage-of-dispatch-0-9">basic use</a>, without using those crazy operators:</p>

<pre><code>val req = url("http://my.server.com/").POST.
  setBody("yeah").
  addQueryParameter("foo", "true").
  addHeader("Content-type", "application/json")
</code></pre>

<p>Then gets back a response in blocking way.</p>

<pre><code>val response = Http(req)()
val body = response.getResponseBody
</code></pre>

<p>HTTP should be that simple, and readable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala + Play! Development Guide]]></title>
    <link href="http://samwize.github.com/2012/10/15/scala-plus-play-development-guide/"/>
    <updated>2012-10-15T16:02:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/15/scala-plus-play-development-guide</id>
    <content type="html"><![CDATA[<p>This is a guide on using Typesafe Stack (basically on Scala + Play! Framework).</p>

<p>It covers installation, start a project, setting up Eclipse and Git, then deploying to Heroku.</p>

<!-- more -->


<h2>Installation</h2>

<p>Install the <a href="http://typesafe.com/stack/download">stack</a>.</p>

<pre><code>$ brew install scala sbt maven giter8
</code></pre>

<p><code>sbt</code> is the <a href="http://typesafe.com/technology/sbt">Simple Build Tool</a> for managing Scala project. The sbt-version for this guide is 0.12.0.</p>

<p><code>giter8</code> is for <a href="https://github.com/n8han/giter8">generating template projects</a>.</p>

<p>If you have a 404 error when maven is being installed, you can <code>brew edit maven</code> and <a href="http://stackoverflow.com/questions/12757694/brew-install-maven-404-error">change the URL</a>.</p>

<h2>Create a new project</h2>

<p>Create a new project using <code>giter8</code> templates</p>

<pre><code>$ g8 typesafehub/play-scala
</code></pre>

<h2>Run the project</h2>

<p>Issue the 2 commands to run</p>

<pre><code>$ sbt
$ run
</code></pre>

<p>The web app will serve at http://localhost:9000/.</p>

<p>You could as well issue a single command <code>sbt run</code>.</p>

<h2>Run a console</h2>

<p>You can also run a play console to do some testing.</p>

<pre><code>$ sbt console
</code></pre>

<p>In the console, you could call any piece of your code directly and conveniently test out stuff.</p>

<h2>Setup Eclipse</h2>

<p>In order to open the project using Eclipse, do a</p>

<pre><code>$ sbt eclipsify
</code></pre>

<p>You would of course download the <a href="http://typesafe.com/stack/scala_ide_download">Scala IDE</a> (Eclipse). I would rename to <code>Eclipse-scala</code> and put in my Applications folder.</p>

<p>Open Eclipse, go to File > Import > General/Existing Project and select the scala project.</p>

<p>Important: Everytime you added libraries and dependencies to the project, you need to <code>sbt eclipsify</code> again.</p>

<h2>Git setup, and .gitignore</h2>

<p>These are the files to ignore; the content of <code>.gitignore</code>:</p>

<pre><code>logs
project/project
project/target
target
tmp
.history
/.settings/
/.target/
/bin/
/eclipse/
/.project
/.classpath
/.cache
/.DS_Store
</code></pre>

<p>Then do <code>git init</code> and your first commit!</p>

<pre><code>git init
git add .
git commit -m "Initial Commit"
</code></pre>

<h2>Scala</h2>

<p>Before the next section on Play! Framework, make sure you are comfortable with Scala first.</p>

<p>Even how much you about Scala being an easy to understand language, and much like Java, trust me. You need to read an introduction guide to Scala first.</p>

<p>A good starting point would be a <a href="http://samwize.github.com/2012/10/07/2012-10-07-a-short-scala-tutorial-for-java-developers/">Scala tutorial</a> from me (:</p>

<h2>Play! Framework</h2>

<p>It&#8217;s time to start actual development of your app.</p>

<p>However, I am going to cut short here, as this post is merely a short guide to get you started.</p>

<p>Head over to <a href="http://scala.playframework.org/documentation/">Play! framework documentation</a> for a tutorial. (You may skip the setup portion, and start with the <a href="http://scala.playframework.org/documentation/2.0.4/ScalaActions">Action</a>)</p>

<h2>Deploy to Heroku</h2>

<p>Heroku supports Play! 2 and Scala. A <a href="https://github.com/playframework/Play20/wiki/ProductionHeroku">wiki</a> on how to deploy to Heroku is available.</p>

<p>You would firstly need to <a href="http://heroku.com/signup">register</a> a Heroku account, and then install <a href="http://toolbelt.heroku.com/">Toolbelt</a>.</p>

<p>You must have setup git as described in the previous section.</p>

<p>Create a heroku app and push to the server</p>

<pre><code>heroku create
git push heroku master
</code></pre>

<p>It will take quite some time to setup the heroku server on the first push. So wait till it says finish, and off you go!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Lean Startup]]></title>
    <link href="http://samwize.github.com/2012/10/11/the-lean-startup/"/>
    <updated>2012-10-11T00:08:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/11/the-lean-startup</id>
    <content type="html"><![CDATA[<p><a href="http://www.bookdepository.co.uk/Lean-Startup-Eric-Ries/9780670921607?a_aid=Just2me">The Lean Startup</a> is about a scientific approach to managing startups/entrepreneurs.</p>

<p>It is recommended that anyone working in a startup stop whatever they are doing, and spent the next 24 hours to complete the book.</p>

<p>I will be summarizing some great concepts that I have learnt.</p>

<p><a href="http://www.bookdepository.co.uk/Lean-Startup-Eric-Ries/9780670921607?a_aid=Just2me"><img class="center" src="http://samwize.github.com/images/book-the-lean-startup.jpeg"></a></p>

<!-- more -->


<h2>Introduction: Why We Fail</h2>

<p>In traditional management, when you fail, there are only 2 possible explanations:</p>

<ol>
<li><p>Fail to plan</p></li>
<li><p>Fail to execute</p></li>
</ol>


<p>But what if you fail because your <strong>hypothesis is wrong</strong> in the first place?</p>

<p>An execution of a perfect plan, based on a flawed idea, would only fail.</p>

<p>The book focus on testing hypothesis and fine-tuning it, in a scientific way.</p>

<h2>Build-Measure-Learn Cycle</h2>

<p>There is usually an hypothesis to an idea, a feature, a marketing plan, a business model, or <em>anything that the customer touches</em>.</p>

<p>We always <em>assume</em> how customer will react.</p>

<p>Hence the need of this cycle/iteration:</p>

<ul>
<li>Build MVP (a Minimum Viable Product)</li>
<li>Measure data</li>
<li>Learn the goods and bads</li>
</ul>


<p><img class="center" src="http://samwize.github.com/images/build-measure-learn-cycle.png"></p>

<p>The process is actually reverse; You start with planning what you want to learn, what you need to measure, then build it small and ASAP - the eventual MVP.</p>

<p>Our job is to find a synthesis between our vision and what the customers would accept. Iterate and find the balance.</p>

<h2>MVP = The Fears</h2>

<p>We always argue about building MVP.</p>

<p>There is usually constant debate among team members on 2 accounts:</p>

<ol>
<li><p>Fear of low quality/inferior product</p></li>
<li><p>Fear of idea being stolen</p></li>
</ol>


<p>But, if we do not know who the customer is, <strong>we do not know what quality is</strong>!</p>

<p>If only it is so easy to get good ideas stolen! The challenge of startup is getting your product noticed by <em>anyone</em>, let alone a competitor.</p>

<p>Even if the idea gets stolen, the only way for either your competitor or you to win is - to learn faster than anyone else. For that, you have a headstart.</p>

<h2>Measure - Innovative Accounting</h2>

<p>Traditional numbers are &#8220;Vanity Metrics&#8221;. eg. total number of users, total active users</p>

<p>It&#8217;s not measuring the Growth Engine.</p>

<p>Startup is about Growth, and the Engine that drives it. Therefore you must and should measure that, and identify it.</p>

<p>Techniques: Cohorts, split test, A/B testing</p>

<p>Make Data part of the product.</p>

<p>3 A&#8217;s of the Data:</p>

<ol>
<li>Actionable Metric = clear cause and effect</li>
<li>Accessible = Everyone can access and understand in layman terms</li>
<li>Auditable = Talking to customer</li>
</ol>


<h2>Pivot</h2>

<p>There is no way to remove human element - vision, intuition, judgement.</p>

<p>Some people are better because they have talent or experience. But it is inevitable for a pivot. It is not a big deal anyway, if you understood why you need a pivot in the first place.</p>

<p>Have regular <strong>Pivot Or Persevere</strong> meeting. Especially if there is telltale signs.</p>

<p>Types of pivot:</p>

<ol>
<li>Zoom-in Pivot</li>
<li>Zoom-out Pivot</li>
<li>Customer Segment Pivot</li>
<li>Customer Needs Pivot</li>
<li>Platform Pivot</li>
<li>Business Architecture Pivot</li>
<li>Value Capture Pivot</li>
<li>Engine of Growth Pivot</li>
<li>Channel Pivot</li>
<li>Technology Pivot</li>
</ol>


<p>Pivot itself is a hypothesis, though a strategic one.</p>

<p>Pivot is a structural change designed to test a fundamental hypothesis about a product, business model, and growth engine.</p>

<p>Startup&#8217;s Runway = Number of Pivots it can still make</p>

<h2>Growth Engine</h2>

<p><strong>Sustainable Growth</strong> = New customers come from the actions of past customers</p>

<p>3 types of growth engine:</p>

<ol>
<li><p>Sticky Engine = Customer retention</p></li>
<li><p>Viral Engine = Spread socially</p></li>
<li><p>Paid Engine = Self funded by advertising</p></li>
</ol>


<p>There are obviously other engines.</p>

<p>Focus on one engine at a time (to build-measure-learn).</p>

<h2>Five Whys</h2>

<p>Ask &#8220;Why&#8221; five times to understand the root of the problem.</p>

<p>Solve a problem in stages, with incremental improvements.</p>

<p>But there is curse of the 5 blames.. Remember, it&#8217;s not about blaming. It&#8217;s about improving the system process.</p>

<p>Two simplified rules:</p>

<ol>
<li><p>Be tolerant on the first mistake</p></li>
<li><p>Never allow the same mistake to be made twice</p></li>
</ol>


<h2>Waste not</h2>

<p>Building products that customers doesn&#8217;t want is a big waste.</p>

<p>In this 21st century, we now have supreme productive capacity and technology. We should change our question from</p>

<blockquote><p>Can it be built?</p></blockquote>

<p>to</p>

<blockquote><p>Should it be built?</p></blockquote>

<p>We would achieve much greater heights, if our economy is not wasteful.</p>

<h2>Other Thoughts</h2>

<p>Traditionally, definition of productivity is by functional excellence. Example, a programmer is expected to code all day.</p>

<p>That&#8217;s why programmers hate meetings. But to achieve validated learning, an individual must cross-function.</p>

<p>Have small, cross-functional team.</p>

<p>Optimization Vs Learning: Some of the features are merely optimization. It improves the product, but marginally. It is demoralizing when that happens.</p>

<p>In traditional management, when senior management don&#8217;t see results, they assume the team did not work hard enough, or not good enough. This is when personnel changes and musical chair is being played.</p>

<p>Organisation has Muscle Memory. It is not easy to change the habits of a company. You are up against a system and individuals&#8217; changes. It&#8217;s tough to implement the methods, but it&#8217;s for the good.</p>

<h2>What should you do?</h2>

<p>After reading the book, I ask myself what should I do?</p>

<p>Hope you ask too, and come to the same conclusion as me - to <em>validate</em> the teachings of The Lean Startup.</p>

<p>Think of a minimum change you can introduced, change it, then measure and learn.</p>

<p><em>PS: If you enjoy, buy the book with my <a href="http://www.bookdepository.co.uk/Lean-Startup-Eric-Ries/9780670921607?a_aid=Just2me">bookdepository affiliate link</a> (:</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure your local environment for Scala on Heroku]]></title>
    <link href="http://samwize.github.com/2012/10/09/configure-your-local-environment-for-scala-on-heroku/"/>
    <updated>2012-10-09T00:35:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/09/configure-your-local-environment-for-scala-on-heroku</id>
    <content type="html"><![CDATA[<p>Heroku has a good <a href="https://devcenter.heroku.com/articles/scala">getting started guide with Scala</a>.</p>

<p>If you know the basic of Heroku, and has started with Typesafe&#8217;s Scala + Play! framework, there is 1 more thing you should to know.</p>

<p>You should know how to properly configure your local development environment.</p>

<!-- more -->


<h2>Add the start script plugin</h2>

<p>Typesafe&#8217;s <a href="https://github.com/typesafehub/xsbt-start-script-plugin">start script plugin</a> helps to generate a <code>target/start</code> script (you will use later).</p>

<p>Create the file <code>project/build.sbt</code> with this</p>

<pre><code>resolvers += Classpaths.typesafeResolver

addSbtPlugin("com.typesafe.startscript" % "xsbt-start-script-plugin" % "0.5.3")
</code></pre>

<h2>Procfile</h2>

<p>Create the file <code>Procfile</code> in the root folder. Enter this line:</p>

<pre><code>web: target/start Web
</code></pre>

<h2>Build your app locally</h2>

<p>You need to run this EVERYTIME before you run the app</p>

<pre><code>$ sbt clean compile stage
</code></pre>

<h2>Run your app locally</h2>

<p>Run your app using <a href="http://blog.daviddollar.org/2011/05/06/introducing-foreman.html">foreman</a></p>

<pre><code>$ foreman run
</code></pre>

<p>The app will run on port 5000 (instead of usual 9000).</p>

<p>Note: When you change your code, you need to exit, <code>sbt clean compile run</code>, then <code>foreman start</code> again..</p>

<h2>Environment Variables (.env)</h2>

<p>The <code>.env</code> file at root is for storing <a href="https://devcenter.heroku.com/articles/config-vars#local_setup">environment variables</a>. This file is in <code>.gitignore</code>, because it usually contains API credentials or environment specific settings.</p>

<p>For example, credentials for mysql/redis/s3/etc is different between local and production environment.</p>

<p>Enter your local environment variables in <code>.env</code> like this</p>

<pre><code>S3_KEY=mykey
S3_SECRET=mysecret
</code></pre>

<p>Enter your production environment variables using heroku command as such</p>

<pre><code>$ heroku config:add S3_KEY=superkey
$ heroku config:add S3_SECRET=supersecret
</code></pre>

<p>Then in your scala code, you can access the respective environment variables as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">s3Key</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">getenv</span><span class="o">(</span><span class="s">&quot;S3_KEY&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Better way to run your app locally</h2>

<p>You could use <code>.env</code> in your local development workspace as described in the above sections.</p>

<p>However, it would inefficient to <code>sbt clean compile run</code> and then <code>foreman start</code> everytime you change your code and run.</p>

<p>So the better way is to store directly in your computer&#8217;s environment variables.</p>

<pre><code>$ export S3_KEY=mykey
</code></pre>

<p>To ensure it&#8217;s stored</p>

<pre><code>$ echo $S3_KEY
</code></pre>

<p>With that, your could <code>sbt run</code> as per normal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A short Scala tutorial for Java Developers]]></title>
    <link href="http://samwize.github.com/2012/10/07/a-short-scala-tutorial-for-java-developers/"/>
    <updated>2012-10-07T21:10:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/07/a-short-scala-tutorial-for-java-developers</id>
    <content type="html"><![CDATA[<p>This post is a tutorial guide for Java programmers who want to learn <a href="http://www.scala-lang.org/">Scala</a>.</p>

<p>I myself have programmed in Java for many years, yet jumping straight into Scala has made me clueless, and so I started to read some <a href="http://www.artima.com/scalazine/articles/steps.html">baby steps</a> to learn the new language.</p>

<p>The following post is what I have learnt.</p>

<!-- more -->


<h2>Methods Declaration</h2>

<p>We use an example of a max function to illustrate the different ways to declare a method.</p>

<p>You do it like this, in a single line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">max</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="n">y</span> <span class="k">else</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, you can skip the return type (Int in this case) and let the compiler infer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">max</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="n">y</span> <span class="k">else</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the method is more than a single line, you can wrap with curly braces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">max</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// More lines of code ..</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="n">y</span> <span class="k">else</span> <span class="n">x</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might have already notice. The <code>return</code> keyword is actually optional in Scala.  If omitted, the last expression is the value that will be returned.</p>

<p>To be verbose, you can specify the return type with the <code>return</code> keyword.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">max</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="n">y</span> <span class="k">else</span> <span class="n">x</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Method with 0 parameter is Special</h2>

<p>If you have the following method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">foo</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;foo!&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may call it in 2 ways</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">foo</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or simply</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, there is a guideline when to use which style. If there is a side effect, you should use the parenthesis. In other words, a getter method can skip the parenthesis.</p>

<h2>Method with 1 parameter is Special</h2>

<p>Int has a method <code>to</code> that takes 1 parameter of Int to return a sequence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mf">0.</span><span class="n">to</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can drop the . and ( ) and simplify to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mi">0</span> <span class="n">to</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>This alone makes the Scala language beautiful in many ways.</p>

<h2>Method names can contain .+*/</h2>

<p>Surprisingly, Scala doesn&#8217;t have operators, and therefore no operator overloading.</p>

<p>But it can have a method name &#8216;+&#8217;. So an expression <code>1 + 2</code> is actually</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mf">1.</span><span class="o">+(</span><span class="mi">2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But since <em>Method with 1 parameter is Special</em> (read above), 1.+(2) can be simplified to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>val and var declarations</h2>

<p>To declare a variable,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">foo</span> <span class="k">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">foo</span> <span class="k">=</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>To declare a value, which does not allow you to change/reassign,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">foo</span> <span class="k">=</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">// foo = 2 is not possible</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, a semi-colon at the end of a line is optional.</p>

<h2>Class constructor</h2>

<p>The constructor is the class declaration itself, and any constructor parameters can be used in other methods</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Color</span><span class="o">(</span><span class="n">color</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">index</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// foo() uses color</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">foo</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">color</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage</span>
</span><span class='line'><span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Color</span><span class="o">(</span><span class="s">&quot;Blue&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need to have some code in the constructor, you could write it right in the class body, right after the declaration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Color</span><span class="o">(</span><span class="n">color</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">index</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">color</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nc">NullPointerException</span><span class="o">(</span><span class="s">&quot;Color is null&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>      <span class="n">index</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">foo</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">color</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have multiple constructors, you can add them with <code>this</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Color</span><span class="o">(</span><span class="n">color</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">index</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="k">this</span><span class="o">(</span><span class="n">color</span><span class="k">:</span><span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="k">this</span><span class="o">(</span><span class="n">color</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">foo</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">color</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage</span>
</span><span class='line'><span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Color</span><span class="o">(</span><span class="s">&quot;Blue&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Static/Singleton object</h2>

<p>You cannot have static classes or variables in a class.</p>

<p>Instead, if you want to add a static method, you have to use the <code>object</code> declaration, also known as Singleton objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Color</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">exclaim</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&quot; color!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage</span>
</span><span class='line'><span class="nc">Color</span><span class="o">.</span><span class="n">exclaim</span><span class="o">(</span><span class="s">&quot;Pink&quot;</span><span class="o">)</span>
</span><span class='line'><span class="c1">// Prints &quot;Pink color!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use the static method in the class method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Color</span><span class="o">(</span><span class="n">color</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">index</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">foo</span><span class="o">()</span> <span class="k">=</span> <span class="nc">Color</span><span class="o">.</span><span class="n">exclaim</span><span class="o">(</span><span class="n">color</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Color</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">exclaim</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&quot; color!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Interface is traits</h2>

<p>In Java, you have <code>Interface</code>. In Scala, you use <code>traits</code>. Moreover, you can have non-abstract methods in <code>traits</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Friendly</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">greet</span><span class="o">()</span> <span class="k">=</span> <span class="s">&quot;Hi&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To have a <code>class</code> implement the <code>traits</code>, you use the <code>extends</code> keyword. And if you need to override the method, you need to explicitly use <code>override def</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="k">extends</span> <span class="nc">Friendly</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">greet</span><span class="o">()</span> <span class="k">=</span> <span class="s">&quot;Woof&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similar to Java, a class can extend 1 class and multiple traits.</p>

<p>Another difference is that Scala can mix in traits at instantiation time. In the following, we create another trait and use the <code>with</code> keyword to instantiate a Dog with that trait.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">ExclamatoryGreeter</span> <span class="k">extends</span> <span class="nc">Friendly</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">greet</span><span class="o">()</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">greet</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage</span>
</span><span class='line'><span class="k">val</span> <span class="n">pup</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Dog</span> <span class="k">with</span> <span class="nc">ExclamatoryGreeter</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">pup</span><span class="o">.</span><span class="n">greet</span><span class="o">())</span>
</span><span class='line'><span class="c1">// Prints &quot;Woof!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Array does not use subscript [ ]</h2>

<p>To access an array, you use ( ) instead of [ ]. It is not a matter of symbol choice. Scala uses ( ) because an array is an object with methods.</p>

<p>To access the 4th element of an array, you write</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">myArray</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Behind the scene, it is in fact calling a method <code>apply</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">myArray</span><span class="o">.</span><span class="n">apply</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, for setting an array element, you write</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">myArray</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is interpreted as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">myArray</span><span class="o">.</span><span class="n">update</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Functions are first class constructs</h2>

<p>Java is <em>imperative</em> style. Scala is <em>imperative</em>, but excels in <em>functional</em> style too.</p>

<p>Being a functional language, functions are first class constructs. We use an example of printing <code>args</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">arg</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">arg</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>foreach</code> is being passed a function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">arg</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">arg</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above function has a few characteristics:</p>

<ul>
<li>It is an anonymous function (has no name)</li>
<li>It get passed a single parameter named <code>arg</code> and the type is being inferred by compiler</li>
<li>The main code is simply the <code>println</code></li>
<li>Yeah, <code>=&gt;</code> is used, also call a right arrow</li>
</ul>


<p>A more complete example of an anonymous method with explicit parameter type</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// More code</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we said, functions are first class constructs, so you basically could assign it to a variable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">add</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// More code</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then use it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">add</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'><span class="c1">// returns 5</span>
</span></code></pre></td></tr></table></div></figure>


<h2>for arg in args</h2>

<p>This is how you use <code>for (arg in args)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">arg</span> <span class="k">&lt;-</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="n">arg</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some characteristics:</p>

<ul>
<li>For each element in <code>args</code>, it is assigned to <code>arg</code> using <code>val (not</code>var`, so you can re-assign)</li>
<li>Yeah, it is using a <code>&lt;-</code>, which you can interpret as &#8216;in&#8217;</li>
<li>It is not a <code>&lt;=</code> because that would mean less-than-or-equal</li>
</ul>


<h2>Array, List, and Tuple</h2>

<p>Much about immutability from Java is different in Scala.</p>

<ul>
<li>Array is mutable</li>
<li>List is immutable</li>
<li>Tuple is immutable, and can contain different types</li>
</ul>


<p>You can read more about <a href="http://www.scala-lang.org/api/current/scala/Array.html">Array</a> and <a href="http://www.scala-lang.org/api/current/scala/collection/immutable/List.html">List</a>.</p>

<p>However, I would want to point out about Tuple, as that is never heard of in Java. In Java, when you want to return multiple objects, you will probably create a POJO (plain old java object) to contain the multiple objects. Using tuple, you can avoid POJO like classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">color</span> <span class="k">=</span> <span class="o">(</span><span class="s">&quot;blue&quot;</span><span class="o">,</span> <span class="mi">258</span><span class="o">,</span> <span class="-Symbol">&#39;b</span><span class="err">&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then access the tuple using a dot, underscore, and the one-based index of the element.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">color</span><span class="o">.</span><span class="n">_1</span><span class="o">)</span>
</span><span class='line'><span class="c1">// Prints blue</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Set and Map</h2>

<p>The way immutability works for Set and Map is different.</p>

<p>To use a mutable Set, you import the mutable HashSet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.HashSet</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">colorSet</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'><span class="n">colorSet</span> <span class="o">+=</span> <span class="s">&quot;blue&quot;</span>
</span><span class='line'><span class="n">colorSet</span> <span class="o">+=</span> <span class="o">(</span><span class="s">&quot;red&quot;</span><span class="o">,</span> <span class="s">&quot;green&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use an immutable Set, you import the <em>immutable version</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.collection.immutable.HashSet</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">colorSet</span> <span class="k">=</span> <span class="nc">HashSet</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="s">&quot;blue&quot;</span><span class="o">,</span> <span class="s">&quot;red&quot;</span><span class="o">,</span> <span class="s">&quot;green&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly for map, there is a mutable and immutable version. Let&#8217;s take a look at just the mutable HashMap.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.HashMap</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">colorMap</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span><span class="o">]</span>
</span><span class='line'><span class="n">colorMap</span> <span class="o">+=</span> <span class="mi">1</span> <span class="o">-&gt;</span> <span class="s">&quot;Blue&quot;</span>
</span><span class='line'><span class="n">colorMap</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">-&gt;</span> <span class="s">&quot;Red&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The expression <code>1 -&gt; "Blue"</code> means <code>1.-&gt;("Blue")</code>. The method <code>-&gt;</code> is available for any object in Scala, and it returns a 2-element tuple. So basically a 2-element tuple of (Int, String) is added to colorMap.</p>

<p>You might think the equivalent is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">colorMap</span> <span class="o">+=</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;Blue&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, that would not work as <code>+=</code> method will interpret as you want to add 2 elements - a Int and a String - where in fact you want to add a tuple (Int, String). Hence you need to add ( ) for the tuple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">colorMap</span> <span class="o">+=</span> <span class="o">((</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;Blue&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also create Map with a shorthand</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="mi">1</span> <span class="o">-&gt;</span> <span class="s">&quot;Blue&quot;</span><span class="o">,</span> <span class="mi">2</span> <span class="o">-&gt;</span> <span class="s">&quot;Red&quot;</span><span class="o">,</span> <span class="mi">3</span> <span class="o">-&gt;</span> <span class="s">&quot;Green&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again, that&#8217;s same as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;Blue&quot;</span><span class="o">),</span> <span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&quot;Red&quot;</span><span class="o">),</span> <span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&quot;Green&quot;</span><span class="o">)</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup GHUnit with CocoaPods]]></title>
    <link href="http://samwize.github.com/2012/10/04/how-to-setup-ghunit-with-cocoapods/"/>
    <updated>2012-10-04T23:21:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/04/how-to-setup-ghunit-with-cocoapods</id>
    <content type="html"><![CDATA[<p>The <a href="http://gabriel.github.com/gh-unit/docs/appledoc_include/guide_install_ios_4.html">installation guide for GHUnit</a> is for installing the framework in the traditional way.</p>

<p>As you might know, <a href="http://cocoapods.org/">CocoaPods</a> is the new way to handle dependencies. Of course, GHUnit is supported.</p>

<p>The is a lack of a guide on how you setup the two useful iOS libraries together.</p>

<!-- more -->


<p>It is similar to the <a href="http://gabriel.github.com/gh-unit/docs/appledoc_include/guide_install_ios_4.html">official guide</a>. I am going to point out the differences when need to.</p>

<h2>Step 1 - Create Test Target</h2>

<p>This is the same. You create a completely new application target.</p>

<p>I prefer to name it <code>AppGHTests</code>, as I might still be using <code>AppTests</code> for my <a href="http://samwize.github.com/2012/10/03/sentestingkit-does-not-support-wait-for-blocks">SenTestings</a>.</p>

<p><img class="center" src="http://samwize.github.com/images/xcode-ghunit-pods-new-target.png"></p>

<h2>Step 2 - Configure Test Target</h2>

<p>You DON&#8217;T have to download and copy <code>GHUnitIOS.framework</code> to your project since you are using CocoaPods. Instead, you should setup GHUnit pods.</p>

<p>Edit the <code>Prodfile</code> and add GHUnitIOS.</p>

<pre><code>platform :ios
pod 'GHUnitIOS', '0.5.5'
</code></pre>

<p>Then install the pod as per normal.</p>

<pre><code>$ pod install
</code></pre>

<p>Continue with the official guide to remove the unnecessary files, and edit <code>main.m</code> to replace the delegate class with <code>GHUnitIOSAppDelegate</code>.</p>

<h2>Step 3 - Configure Pod for Test Target</h2>

<p>This part is IMPORTANT. The new test target will not include the pods.</p>

<p>You need to configure the target to be based on Pods project. Refer to <a href="http://samwize.com/2012/10/01/unit-tests-with-cocoapods/">this post</a>.</p>

<p>Lastly, add the <code>libPods.a</code> library to the test target.</p>

<p><img class="center" src="http://samwize.github.com/images/xcode-ghunit-pods-libpods.png"></p>

<p>That&#8217;s it. Run the test target!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SenTestingKit does not support wait for blocks]]></title>
    <link href="http://samwize.github.com/2012/10/03/sentestingkit-does-not-support-wait-for-blocks/"/>
    <updated>2012-10-03T00:21:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/03/sentestingkit-does-not-support-wait-for-blocks</id>
    <content type="html"><![CDATA[<p>I was using <a href="http://developer.apple.com/library/mac/#documentation/developertools/Conceptual/UnitTesting/00-About_Unit_Testing/about.html">SenTestingKit</a>, the default unit testing framework from Apple, when I found out that it does not support tests that involve asynchronous methods, or blocks.</p>

<p>That&#8217;s a waste.</p>

<!-- more -->


<p>Though there is <a href="https://gist.github.com/2254570">a workaround</a> using semaphore.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testBlockMethod</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_semaphore_t</span> <span class="n">semaphore</span> <span class="o">=</span> <span class="n">dispatch_semaphore_create</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Your block method eg. AFNetworking</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://httpbin.org/ip&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="n">AFJSONRequestOperation</span> <span class="o">*</span><span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFJSONRequestOperation</span> <span class="nl">JSONRequestOperationWithRequest:</span><span class="n">request</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">,</span> <span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="kt">id</span> <span class="n">JSON</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;IP Address: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">JSON</span> <span class="nl">valueForKeyPath:</span><span class="s">@&quot;origin&quot;</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">STAssertNotNil</span><span class="p">(</span><span class="n">JSON</span><span class="p">,</span> <span class="s">@&quot;JSON not loaded&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// Signal that block has completed</span>
</span><span class='line'>        <span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">semaphore</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">operation</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Run loop</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">semaphore</span><span class="p">,</span> <span class="n">DISPATCH_TIME_NOW</span><span class="p">))</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">runMode:</span><span class="n">NSDefaultRunLoopMode</span>
</span><span class='line'>                                 <span class="nl">beforeDate:</span><span class="p">[</span><span class="n">NSDate</span> <span class="nl">dateWithTimeIntervalSinceNow:</span><span class="mi">10</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">dispatch_release</span><span class="p">(</span><span class="n">semaphore</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if you mind, there are lots of <a href="http://stackoverflow.com/questions/4114083/ios-tests-specs-tdd-bdd-and-integration-acceptance-testing">other testing frameworks</a>, eg <a href="https://github.com/gabriel/gh-unit">GHUnit</a> supports asynchronous testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Store Changes in iOS6]]></title>
    <link href="http://samwize.github.com/2012/10/02/app-store-changes-in-ios6/"/>
    <updated>2012-10-02T22:22:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/02/app-store-changes-in-ios6</id>
    <content type="html"><![CDATA[<p>iOS 6 has introduced a big change to how App Store works.</p>

<p>The changes <a href="http://www.gamezebo.com/news/2012/09/25/ios-6-app-store-and-what-it-means-developers">means a lot to developers</a>, and affects how developers would write their app descriptions, screenshots, etc.</p>

<p>Some of the changes are so breaking, that lightwoodgames said - <a href="http://www.lightwoodgames.com/blog/2012/09/everything-thats-wrong-with-the-app-store-in-ios-6/#.UGhVbaQe7UO">don&#8217;t just put up with this!</a>.</p>

<p>You could also refer to a <a href="http://www.apptamin.com/ASO_Cheat_Sheet-v2.pdf">simple cheatsheet</a>.</p>

<p>Here&#8217;s my short version of what you should take note of:</p>

<!-- more -->


<ol>
<li><p>First screenshot is very important</p></li>
<li><p>First 3 lines of description is still very prominent</p></li>
<li><p>Fill up What&#8217;s New section</p></li>
<li><p>Enter your App Support URL</p></li>
<li><p>Ask your users to &#8216;like&#8217; on Facebook</p></li>
</ol>


<p>And as always, search algorithm is forever changing. Use your keywords effectively. Use unique (and not generic) keywords. Use singular form.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Tests with CocoaPods]]></title>
    <link href="http://samwize.github.com/2012/10/01/unit-tests-with-cocoapods/"/>
    <updated>2012-10-01T23:41:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/01/unit-tests-with-cocoapods</id>
    <content type="html"><![CDATA[<p><a href="http://cocoapods.org/">CocoaPods</a> is a tool for managing dependecies for iOS and Mac OS X projects.</p>

<p><a href="http://cocoapods.org/">Getting started</a> with using CocoaPods is easy. The tricky part is getting used to opening Xcode workspace (eg. <code>App.xcworkspace</code>) instead of Xocde project. But that&#8217;s not what I want to covered in this post.</p>

<p>One of the hurdle I encountered is getting unit testing to work after CocoaPods is setup.</p>

<!-- more -->


<p>Apparently, after you setup CocoaPods, it automatically configures your project&#8217;s main target to use the pods (dependecies). However, it does not configure the same for your unit tests target. So when you run your unit test, you will likely encounter errors like this:</p>

<pre><code>SomeLibrary.h not found
</code></pre>

<p>To fix, go to <strong>Project</strong> > <strong>Info</strong> > <strong>Configurations</strong> > change <code>Based on Configuration File</code> to <code>Pods</code>. Like this:</p>

<p><img class="center" src="http://samwize.github.com/images/cocoapods-unit-test-configure.png"></p>
]]></content>
  </entry>
  
</feed>
