<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Junda Ong]]></title>
  <link href="http://samwize.github.com/atom.xml" rel="self"/>
  <link href="http://samwize.github.com/"/>
  <updated>2012-10-19T23:14:14+08:00</updated>
  <id>http://samwize.github.com/</id>
  <author>
    <name><![CDATA[Junda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I hate Scala]]></title>
    <link href="http://samwize.github.com/2012/10/19/why-i-hate-scala/"/>
    <updated>2012-10-19T21:44:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/19/why-i-hate-scala</id>
    <content type="html"><![CDATA[<p>I spent about 2 weeks using Scala, before concluding that I hate the language.</p>

<p>When I first wrote the first <a href="http://samwize.github.com/2012/10/07/a-short-scala-tutorial-for-java-developers/">beginner guide to Scala</a>, I was in awe, and yet feeling a tinge of uneasiness.</p>

<p>Then I spent a few days creating a Scala web application, resulting in a subsequent <a href="http://samwize.github.com/2012/10/15/scala-plus-play-development-guide/">random guide to Scala programming</a>.</p>

<p>After I am done with the project, I know I would not start another project in Scala at my own will.</p>

<!-- more -->


<p>There are many <a href="http://m-mansur-ashraf.blogspot.sg/2011/08/is-scala-really-too-complex-for-average_20.html">Scala</a> <a href="http://amplicate.com/hate/scala">haters</a>.</p>

<p>Here&#8217;s what I think:</p>

<ul>
<li><p>Scala is a powerful &amp; complex language.</p></li>
<li><p>You could have dozens of custom operators like <code>&lt;/&gt;</code>, and <code>=:=</code>. That makes understanding code very difficult. Take a look at the <a href="http://www.flotsam.nl/dispatch-periodic-table.html">dispatch</a> (HTTP) library.</p></li>
<li><p>Even simple usage requires explaining. There&#8217;s too many concepts.</p></li>
<li><p>Otherwise, it is a <a href="http://dispatch.databinder.net/">lack of explaining</a></p></li>
<li><p>You will be constantly figuring out the language syntax</p></li>
<li><p>Ecosystem not great; lack of support, docs</p></li>
</ul>


<p>It&#8217;s damn hard to read Scala code.</p>

<p>You can call me an average programmer for all I care. But let&#8217;s say I am average, and I can&#8217;t understand Scala, then Scala is not a universal language.</p>

<p>Reading a <a href="http://blog.joda.org/2011/11/real-life-scala-feedback-from-yammer.html">real life feedback from Yammer</a>, it worries me even more. Some other things they said:</p>

<ul>
<li><p>Major version releases is backward incompatible</p></li>
<li><p>High learning curve, slow to get productive</p></li>
<li><p>To increase performance: Don&#8217;t use for-loop, s.c.m/i.. wtf</p></li>
<li><p>Compared 2 codebases, consensus is Java. Hence they switched back.</p></li>
</ul>


<p>I like Python better. And I always like one of <a href="http://c2.com/cgi/wiki?PythonPhilosophy">Python design philosophy</a></p>

<blockquote><p>There should be one&#8211; and preferably only one &#8211;obvious way to do it.</p></blockquote>

<p>Scala has <em>too many ways</em>.</p>

<p>You will not be able to comprehend easily. Never.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Tutorial (Part II)]]></title>
    <link href="http://samwize.github.com/2012/10/18/scala-tutorial-part-ii/"/>
    <updated>2012-10-18T22:14:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/18/scala-tutorial-part-ii</id>
    <content type="html"><![CDATA[<p>This is a continuation to <a href="http://samwize.github.com/2012-10/07/a-short-scala-tutorial-for-java-developers">a short Scala tutorial</a> and <a href="2012/10/15/scala-plus-play-development-guide">Scala+Play Development Guide</a>.</p>

<p>During the development of a project using Typesafe Stack (Scala + Akka + Play!), I learnt quite a few things about Scala and the Play framework.</p>

<!-- more -->


<h2>Switch case statements</h2>

<p>You can do <a href="http://kerflyn.wordpress.com/2011/02/14/playing-with-scalas-pattern-matching/">switch statements</a> pattern matching. A simple <code>switch case</code> statement looks like this:</p>

<pre><code>n match {
    case 0 =&gt; println("Zero")
    case 1 =&gt; println("One")
    case n =&gt; println("It is " + n)
}
</code></pre>

<h2>What is sealed trait</h2>

<p>Use <a href="http://stackoverflow.com/questions/11203268/what-is-a-sealed-trait">sealed trait</a> as <code>enums</code></p>

<pre><code>sealed trait Answer
case object Yes extends Answer
case object No extends Answer
</code></pre>

<p>Add a folder to classpath (for reading files). Don&#8217;t have to put in src.</p>

<p>In Eclipse, right click, Build Path > Use As Source Folder</p>

<p>Folder will be in classpath. Access using</p>

<h2>Read a resource file in Scala Play! 2</h2>

<p>Let&#8217;s say you have a text file call <code>myfile.txt</code>. You should put in <code>/public</code> of your Play! project.</p>

<p>You can read the file with the following <a href="http://stackoverflow.com/questions/12825644/how-to-read-a-file-in-scala-with-play-2-0">code</a>:</p>

<pre><code>val is = Application.getClass().getResourceAsStream("/public/myfile.txt")    
val src = scala.io.Source.Source.fromInputStream(is)
val iter = src.getLine
for (s &lt;- iter)
    println(s)
</code></pre>

<h2>Accessing Global Object</h2>

<p>If you have an object that is initiated once when the app starts, you can put it in the <code>Global</code> object.</p>

<p>However, <code>Global</code> object is by default in a default package, and because it is in default package, it cannot be referenced/accessed by other packages.</p>

<p>The <a href="http://stackoverflow.com/questions/10440864/play-2-0-scala-accessing-global-object">workaround</a> is to move your Global object into a specific package, and change the <code>application.conf</code> file to</p>

<pre><code>global= my.packaged.Global
</code></pre>

<h2>Initializing a class</h2>

<p>There is differences between</p>

<pre><code>class Person(name:String)
</code></pre>

<p>and</p>

<pre><code>class Person(val name:String)
</code></pre>

<p>In the later (with <code>val</code> in the constructor), you can access <code>person.name</code>. For former does not. Very subtle difference until when I create my first class.</p>

<h2>Unit Testing with Specs</h2>

<p>Write your unit tests with <a href="http://www.playframework.org/documentation/2.0/ScalaTest">specs2</a>.</p>

<p>To run just 1 test:</p>

<pre><code>sbt test-only test.MySpec
</code></pre>

<h2>java.lang.OutOfMemoryError: PermGen space</h2>

<p>When <code>sbt run</code>, sometimes you would run into the error</p>

<pre><code>java.lang.OutOfMemoryError: PermGen space
</code></pre>

<p>To solve, you can</p>

<pre><code>brew info sbt
</code></pre>

<p>to look for a clue. Changing to 512M helps.</p>

<pre><code>export SBT_OPTS="-XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=512M"
</code></pre>

<p>As much as you could googled, <a href="http://javarevisited.blogspot.sg/2011/09/javalangoutofmemoryerror-permgen-space.html">some</a> solutions do not work.</p>

<h2>Split 1 line of code into multiple lines</h2>

<p>Something so simple does not work as you normally do in Java. For example, this would not compile:</p>

<pre><code>val s = "a"
    + "b"
</code></pre>

<p>This is because <code>+</code> is a method, and it needs to be on the same line as the member calling the method (that is &#8220;a&#8221;).</p>

<p>Instead, this will work:</p>

<pre><code>val s = "a" +
    "b"
</code></pre>

<p>Or you can use brackets..</p>

<pre><code>val s = ("a"
    + "b")
</code></pre>

<p>The same goes for calling methods with dot notation. This will not work:</p>

<pre><code>myClass.someMethod
    .anotherMethod
</code></pre>

<p>This will work:</p>

<pre><code>myClass.someMethod.
    anotherMethod
</code></pre>

<h2>Play! asText is tricky</h2>

<p><code>request.body.asText</code> is tricky. It could be None even when there is something.</p>

<p>Let&#8217;s same you POST some data, and you didn&#8217;t specify <code>Content-Type: application/x-www-form-urlencoded</code>.</p>

<p>Firstly, <code>request.body.asFormUrlEncoded</code> will be <code>None</code>. Okay, I understand that is because Play! is strict with missing content-type.</p>

<p>However, <code>request.body.asText</code> will be <code>None</code> too!</p>

<h2>A simple HTTP POST</h2>

<p><a href="http://dispatch.databinder.net/">Dispatch</a> is the most popular HTTP library for Scala. However, to me, it is difficult to understand, <a href="http://www.flotsam.nl/dispatch-periodic-table.html">cryptic</a>, and with poor documentation.</p>

<p>It took me a while to find a <a href="http://stackoverflow.com/questions/12342062/basic-usage-of-dispatch-0-9">basic use</a>, without using those crazy operators:</p>

<pre><code>val req = url("http://my.server.com/").POST.
  setBody("yeah").
  addQueryParameter("foo", "true").
  addHeader("Content-type", "application/json")
</code></pre>

<p>Then gets back a response in blocking way.</p>

<pre><code>val response = Http(req)()
val body = response.getResponseBody
</code></pre>

<p>HTTP should be that simple, and readable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala + Play! Development Guide]]></title>
    <link href="http://samwize.github.com/2012/10/15/scala-plus-play-development-guide/"/>
    <updated>2012-10-15T16:02:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/15/scala-plus-play-development-guide</id>
    <content type="html"><![CDATA[<p>This is a guide on using Typesafe Stack (basically on Scala + Play! Framework).</p>

<p>It covers installation, start a project, setting up Eclipse and Git, then deploying to Heroku.</p>

<!-- more -->


<h2>Installation</h2>

<p>Install the <a href="http://typesafe.com/stack/download">stack</a>.</p>

<pre><code>$ brew install scala sbt maven giter8
</code></pre>

<p><code>sbt</code> is the <a href="http://typesafe.com/technology/sbt">Simple Build Tool</a> for managing Scala project. The sbt-version for this guide is 0.12.0.</p>

<p><code>giter8</code> is for <a href="https://github.com/n8han/giter8">generating template projects</a>.</p>

<p>If you have a 404 error when maven is being installed, you can <code>brew edit maven</code> and <a href="http://stackoverflow.com/questions/12757694/brew-install-maven-404-error">change the URL</a>.</p>

<h2>Create a new project</h2>

<p>Create a new project using <code>giter8</code> templates</p>

<pre><code>$ g8 typesafehub/play-scala
</code></pre>

<h2>Run the project</h2>

<p>Issue the 2 commands to run</p>

<pre><code>$ sbt
$ run
</code></pre>

<p>The web app will serve at http://localhost:9000/.</p>

<p>You could as well issue a single command <code>sbt run</code>.</p>

<h2>Run a console</h2>

<p>You can also run a play console to do some testing.</p>

<pre><code>$ sbt console
</code></pre>

<p>In the console, you could call any piece of your code directly and conveniently test out stuff.</p>

<h2>Setup Eclipse</h2>

<p>In order to open the project using Eclipse, do a</p>

<pre><code>$ sbt eclipsify
</code></pre>

<p>You would of course download the <a href="http://typesafe.com/stack/scala_ide_download">Scala IDE</a> (Eclipse). I would rename to <code>Eclipse-scala</code> and put in my Applications folder.</p>

<p>Open Eclipse, go to File > Import > General/Existing Project and select the scala project.</p>

<p>Important: Everytime you added libraries and dependencies to the project, you need to <code>sbt eclipsify</code> again.</p>

<h2>Git setup, and .gitignore</h2>

<p>These are the files to ignore; the content of <code>.gitignore</code>:</p>

<pre><code>logs
project/project
project/target
target
tmp
.history
/.settings/
/.target/
/bin/
/eclipse/
/.project
/.classpath
/.cache
/.DS_Store
</code></pre>

<p>Then do <code>git init</code> and your first commit!</p>

<pre><code>git init
git add .
git commit -m "Initial Commit"
</code></pre>

<h2>Scala</h2>

<p>Before the next section on Play! Framework, make sure you are comfortable with Scala first.</p>

<p>Even how much you about Scala being an easy to understand language, and much like Java, trust me. You need to read an introduction guide to Scala first.</p>

<p>A good starting point would be a <a href="http://samwize.github.com/2012/10/07/2012-10-07-a-short-scala-tutorial-for-java-developers/">Scala tutorial</a> from me (:</p>

<h2>Play! Framework</h2>

<p>It&#8217;s time to start actual development of your app.</p>

<p>However, I am going to cut short here, as this post is merely a short guide to get you started.</p>

<p>Head over to <a href="http://scala.playframework.org/documentation/">Play! framework documentation</a> for a tutorial. (You may skip the setup portion, and start with the <a href="http://scala.playframework.org/documentation/2.0.4/ScalaActions">Action</a>)</p>

<h2>Deploy to Heroku</h2>

<p>Heroku supports Play! 2 and Scala. A <a href="https://github.com/playframework/Play20/wiki/ProductionHeroku">wiki</a> on how to deploy to Heroku is available.</p>

<p>You would firstly need to <a href="http://heroku.com/signup">register</a> a Heroku account, and then install <a href="http://toolbelt.heroku.com/">Toolbelt</a>.</p>

<p>You must have setup git as described in the previous section.</p>

<p>Create a heroku app and push to the server</p>

<pre><code>heroku create
git push heroku master
</code></pre>

<p>It will take quite some time to setup the heroku server on the first push. So wait till it says finish, and off you go!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Lean Startup]]></title>
    <link href="http://samwize.github.com/2012/10/11/the-lean-startup/"/>
    <updated>2012-10-11T00:08:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/11/the-lean-startup</id>
    <content type="html"><![CDATA[<p><a href="http://www.bookdepository.co.uk/Lean-Startup-Eric-Ries/9780670921607?a_aid=Just2me">The Lean Startup</a> is about a scientific approach to managing startups/entrepreneurs.</p>

<p>It is recommended that anyone working in a startup stop whatever they are doing, and spent the next 24 hours to complete the book.</p>

<p>I will be summarizing some great concepts that I have learnt.</p>

<p><a href="http://www.bookdepository.co.uk/Lean-Startup-Eric-Ries/9780670921607?a_aid=Just2me"><img class="center" src="http://samwize.github.com/images/book-the-lean-startup.jpeg"></a></p>

<!-- more -->


<h2>Introduction: Why We Fail</h2>

<p>In traditional management, when you fail, there are only 2 possible explanations:</p>

<ol>
<li><p>Fail to plan</p></li>
<li><p>Fail to execute</p></li>
</ol>


<p>But what if you fail because your <strong>hypothesis is wrong</strong> in the first place?</p>

<p>An execution of a perfect plan, based on a flawed idea, would only fail.</p>

<p>The book focus on testing hypothesis and fine-tuning it, in a scientific way.</p>

<h2>Build-Measure-Learn Cycle</h2>

<p>There is usually an hypothesis to an idea, a feature, a marketing plan, a business model, or <em>anything that the customer touches</em>.</p>

<p>We always <em>assume</em> how customer will react.</p>

<p>Hence the need of this cycle/iteration:</p>

<ul>
<li>Build MVP (a Minimum Viable Product)</li>
<li>Measure data</li>
<li>Learn the goods and bads</li>
</ul>


<p><img class="center" src="http://samwize.github.com/images/build-measure-learn-cycle.png"></p>

<p>The process is actually reverse; You start with planning what you want to learn, what you need to measure, then build it small and ASAP - the eventual MVP.</p>

<p>Our job is to find a synthesis between our vision and what the customers would accept. Iterate and find the balance.</p>

<h2>MVP = The Fears</h2>

<p>We always argue about building MVP.</p>

<p>There is usually constant debate among team members on 2 accounts:</p>

<ol>
<li><p>Fear of low quality/inferior product</p></li>
<li><p>Fear of idea being stolen</p></li>
</ol>


<p>But, if we do not know who the customer is, <strong>we do not know what quality is</strong>!</p>

<p>If only it is so easy to get good ideas stolen! The challenge of startup is getting your product noticed by <em>anyone</em>, let alone a competitor.</p>

<p>Even if the idea gets stolen, the only way for either your competitor or you to win is - to learn faster than anyone else. For that, you have a headstart.</p>

<h2>Measure - Innovative Accounting</h2>

<p>Traditional numbers are &#8220;Vanity Metrics&#8221;. eg. total number of users, total active users</p>

<p>It&#8217;s not measuring the Growth Engine.</p>

<p>Startup is about Growth, and the Engine that drives it. Therefore you must and should measure that, and identify it.</p>

<p>Techniques: Cohorts, split test, A/B testing</p>

<p>Make Data part of the product.</p>

<p>3 A&#8217;s of the Data:</p>

<ol>
<li>Actionable Metric = clear cause and effect</li>
<li>Accessible = Everyone can access and understand in layman terms</li>
<li>Auditable = Talking to customer</li>
</ol>


<h2>Pivot</h2>

<p>There is no way to remove human element - vision, intuition, judgement.</p>

<p>Some people are better because they have talent or experience. But it is inevitable for a pivot. It is not a big deal anyway, if you understood why you need a pivot in the first place.</p>

<p>Have regular <strong>Pivot Or Persevere</strong> meeting. Especially if there is telltale signs.</p>

<p>Types of pivot:</p>

<ol>
<li>Zoom-in Pivot</li>
<li>Zoom-out Pivot</li>
<li>Customer Segment Pivot</li>
<li>Customer Needs Pivot</li>
<li>Platform Pivot</li>
<li>Business Architecture Pivot</li>
<li>Value Capture Pivot</li>
<li>Engine of Growth Pivot</li>
<li>Channel Pivot</li>
<li>Technology Pivot</li>
</ol>


<p>Pivot itself is a hypothesis, though a strategic one.</p>

<p>Pivot is a structural change designed to test a fundamental hypothesis about a product, business model, and growth engine.</p>

<p>Startup&#8217;s Runway = Number of Pivots it can still make</p>

<h2>Growth Engine</h2>

<p><strong>Sustainable Growth</strong> = New customers come from the actions of past customers</p>

<p>3 types of growth engine:</p>

<ol>
<li><p>Sticky Engine = Customer retention</p></li>
<li><p>Viral Engine = Spread socially</p></li>
<li><p>Paid Engine = Self funded by advertising</p></li>
</ol>


<p>There are obviously other engines.</p>

<p>Focus on one engine at a time (to build-measure-learn).</p>

<h2>Five Whys</h2>

<p>Ask &#8220;Why&#8221; five times to understand the root of the problem.</p>

<p>Solve a problem in stages, with incremental improvements.</p>

<p>But there is curse of the 5 blames.. Remember, it&#8217;s not about blaming. It&#8217;s about improving the system process.</p>

<p>Two simplified rules:</p>

<ol>
<li><p>Be tolerant on the first mistake</p></li>
<li><p>Never allow the same mistake to be made twice</p></li>
</ol>


<h2>Waste not</h2>

<p>Building products that customers doesn&#8217;t want is a big waste.</p>

<p>In this 21st century, we now have supreme productive capacity and technology. We should change our question from</p>

<blockquote><p>Can it be built?</p></blockquote>

<p>to</p>

<blockquote><p>Should it be built?</p></blockquote>

<p>We would achieve much greater heights, if our economy is not wasteful.</p>

<h2>Other Thoughts</h2>

<p>Traditionally, definition of productivity is by functional excellence. Example, a programmer is expected to code all day.</p>

<p>That&#8217;s why programmers hate meetings. But to achieve validated learning, an individual must cross-function.</p>

<p>Have small, cross-functional team.</p>

<p>Optimization Vs Learning: Some of the features are merely optimization. It improves the product, but marginally. It is demoralizing when that happens.</p>

<p>In traditional management, when senior management don&#8217;t see results, they assume the team did not work hard enough, or not good enough. This is when personnel changes and musical chair is being played.</p>

<p>Organisation has Muscle Memory. It is not easy to change the habits of a company. You are up against a system and individuals&#8217; changes. It&#8217;s tough to implement the methods, but it&#8217;s for the good.</p>

<h2>What should you do?</h2>

<p>After reading the book, I ask myself what should I do?</p>

<p>Hope you ask too, and come to the same conclusion as me - to <em>validate</em> the teachings of The Lean Startup.</p>

<p>Think of a minimum change you can introduced, change it, then measure and learn.</p>

<p><em>PS: If you enjoy, buy the book with my <a href="http://www.bookdepository.co.uk/Lean-Startup-Eric-Ries/9780670921607?a_aid=Just2me">bookdepository affiliate link</a> (:</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure your local environment for Scala on Heroku]]></title>
    <link href="http://samwize.github.com/2012/10/09/configure-your-local-environment-for-scala-on-heroku/"/>
    <updated>2012-10-09T00:35:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/09/configure-your-local-environment-for-scala-on-heroku</id>
    <content type="html"><![CDATA[<p>Heroku has a good <a href="https://devcenter.heroku.com/articles/scala">getting started guide with Scala</a>.</p>

<p>If you know the basic of Heroku, and has started with Typesafe&#8217;s Scala + Play! framework, there is 1 more thing you should to know.</p>

<p>You should know how to properly configure your local development environment.</p>

<!-- more -->


<h2>Add the start script plugin</h2>

<p>Typesafe&#8217;s <a href="https://github.com/typesafehub/xsbt-start-script-plugin">start script plugin</a> helps to generate a <code>target/start</code> script (you will use later).</p>

<p>Create the file <code>project/build.sbt</code> with this</p>

<pre><code>resolvers += Classpaths.typesafeResolver

addSbtPlugin("com.typesafe.startscript" % "xsbt-start-script-plugin" % "0.5.3")
</code></pre>

<h2>Procfile</h2>

<p>Create the file <code>Procfile</code> in the root folder. Enter this line:</p>

<pre><code>web: target/start Web
</code></pre>

<h2>Build your app locally</h2>

<p>You need to run this EVERYTIME before you run the app</p>

<pre><code>$ sbt clean compile stage
</code></pre>

<h2>Run your app locally</h2>

<p>Run your app using <a href="http://blog.daviddollar.org/2011/05/06/introducing-foreman.html">foreman</a></p>

<pre><code>$ foreman run
</code></pre>

<p>The app will run on port 5000 (instead of usual 9000).</p>

<p>Note: When you change your code, you need to exit, <code>sbt clean compile run</code>, then <code>foreman start</code> again..</p>

<h2>Environment Variables (.env)</h2>

<p>The <code>.env</code> file at root is for storing <a href="https://devcenter.heroku.com/articles/config-vars#local_setup">environment variables</a>. This file is in <code>.gitignore</code>, because it usually contains API credentials or environment specific settings.</p>

<p>For example, credentials for mysql/redis/s3/etc is different between local and production environment.</p>

<p>Enter your local environment variables in <code>.env</code> like this</p>

<pre><code>S3_KEY=mykey
S3_SECRET=mysecret
</code></pre>

<p>Enter your production environment variables using heroku command as such</p>

<pre><code>$ heroku config:add S3_KEY=superkey
$ heroku config:add S3_SECRET=supersecret
</code></pre>

<p>Then in your scala code, you can access the respective environment variables as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">s3Key</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">getenv</span><span class="o">(</span><span class="s">&quot;S3_KEY&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Better way to run your app locally</h2>

<p>You could use <code>.env</code> in your local development workspace as described in the above sections.</p>

<p>However, it would inefficient to <code>sbt clean compile run</code> and then <code>foreman start</code> everytime you change your code and run.</p>

<p>So the better way is to store directly in your computer&#8217;s environment variables.</p>

<pre><code>$ export S3_KEY=mykey
</code></pre>

<p>To ensure it&#8217;s stored</p>

<pre><code>$ echo $S3_KEY
</code></pre>

<p>With that, your could <code>sbt run</code> as per normal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A short Scala tutorial for Java Developers]]></title>
    <link href="http://samwize.github.com/2012/10/07/a-short-scala-tutorial-for-java-developers/"/>
    <updated>2012-10-07T21:10:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/07/a-short-scala-tutorial-for-java-developers</id>
    <content type="html"><![CDATA[<p>This post is a tutorial guide for Java programmers who want to learn <a href="http://www.scala-lang.org/">Scala</a>.</p>

<p>I myself have programmed in Java for many years, yet jumping straight into Scala has made me clueless, and so I started to read some <a href="http://www.artima.com/scalazine/articles/steps.html">baby steps</a> to learn the new language.</p>

<p>The following post is what I have learnt.</p>

<!-- more -->


<h2>Methods Declaration</h2>

<p>We use an example of a max function to illustrate the different ways to declare a method.</p>

<p>You do it like this, in a single line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">max</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="n">y</span> <span class="k">else</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, you can skip the return type (Int in this case) and let the compiler infer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">max</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="n">y</span> <span class="k">else</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the method is more than a single line, you can wrap with curly braces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">max</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// More lines of code ..</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="n">y</span> <span class="k">else</span> <span class="n">x</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might have already notice. The <code>return</code> keyword is actually optional in Scala.  If omitted, the last expression is the value that will be returned.</p>

<p>To be verbose, you can specify the return type with the <code>return</code> keyword.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">max</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="n">y</span> <span class="k">else</span> <span class="n">x</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Method with 0 parameter is Special</h2>

<p>If you have the following method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">foo</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;foo!&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may call it in 2 ways</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">foo</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or simply</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, there is a guideline when to use which style. If there is a side effect, you should use the parenthesis. In other words, a getter method can skip the parenthesis.</p>

<h2>Method with 1 parameter is Special</h2>

<p>Int has a method <code>to</code> that takes 1 parameter of Int to return a sequence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mf">0.</span><span class="n">to</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can drop the . and ( ) and simplify to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mi">0</span> <span class="n">to</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>This alone makes the Scala language beautiful in many ways.</p>

<h2>Method names can contain .+*/</h2>

<p>Surprisingly, Scala doesn&#8217;t have operators, and therefore no operator overloading.</p>

<p>But it can have a method name &#8216;+&#8217;. So an expression <code>1 + 2</code> is actually</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mf">1.</span><span class="o">+(</span><span class="mi">2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But since <em>Method with 1 parameter is Special</em> (read above), 1.+(2) can be simplified to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>val and var declarations</h2>

<p>To declare a variable,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">foo</span> <span class="k">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">foo</span> <span class="k">=</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>To declare a value, which does not allow you to change/reassign,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">foo</span> <span class="k">=</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">// foo = 2 is not possible</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, a semi-colon at the end of a line is optional.</p>

<h2>Class constructor</h2>

<p>The constructor is the class declaration itself, and any constructor parameters can be used in other methods</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Color</span><span class="o">(</span><span class="n">color</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">index</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// foo() uses color</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">foo</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">color</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage</span>
</span><span class='line'><span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Color</span><span class="o">(</span><span class="s">&quot;Blue&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need to have some code in the constructor, you could write it right in the class body, right after the declaration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Color</span><span class="o">(</span><span class="n">color</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">index</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">color</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nc">NullPointerException</span><span class="o">(</span><span class="s">&quot;Color is null&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>      <span class="n">index</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">foo</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">color</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have multiple constructors, you can add them with <code>this</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Color</span><span class="o">(</span><span class="n">color</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">index</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="k">this</span><span class="o">(</span><span class="n">color</span><span class="k">:</span><span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="k">this</span><span class="o">(</span><span class="n">color</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">foo</span><span class="o">()</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">color</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage</span>
</span><span class='line'><span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Color</span><span class="o">(</span><span class="s">&quot;Blue&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Static/Singleton object</h2>

<p>You cannot have static classes or variables in a class.</p>

<p>Instead, if you want to add a static method, you have to use the <code>object</code> declaration, also known as Singleton objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Color</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">exclaim</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&quot; color!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage</span>
</span><span class='line'><span class="nc">Color</span><span class="o">.</span><span class="n">exclaim</span><span class="o">(</span><span class="s">&quot;Pink&quot;</span><span class="o">)</span>
</span><span class='line'><span class="c1">// Prints &quot;Pink color!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use the static method in the class method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Color</span><span class="o">(</span><span class="n">color</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">index</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">foo</span><span class="o">()</span> <span class="k">=</span> <span class="nc">Color</span><span class="o">.</span><span class="n">exclaim</span><span class="o">(</span><span class="n">color</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Color</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">exclaim</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&quot; color!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Interface is traits</h2>

<p>In Java, you have <code>Interface</code>. In Scala, you use <code>traits</code>. Moreover, you can have non-abstract methods in <code>traits</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Friendly</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">greet</span><span class="o">()</span> <span class="k">=</span> <span class="s">&quot;Hi&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To have a <code>class</code> implement the <code>traits</code>, you use the <code>extends</code> keyword. And if you need to override the method, you need to explicitly use <code>override def</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="k">extends</span> <span class="nc">Friendly</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">greet</span><span class="o">()</span> <span class="k">=</span> <span class="s">&quot;Woof&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similar to Java, a class can extend 1 class and multiple traits.</p>

<p>Another difference is that Scala can mix in traits at instantiation time. In the following, we create another trait and use the <code>with</code> keyword to instantiate a Dog with that trait.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">ExclamatoryGreeter</span> <span class="k">extends</span> <span class="nc">Friendly</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">greet</span><span class="o">()</span> <span class="k">=</span> <span class="k">super</span><span class="o">.</span><span class="n">greet</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage</span>
</span><span class='line'><span class="k">val</span> <span class="n">pup</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Dog</span> <span class="k">with</span> <span class="nc">ExclamatoryGreeter</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">pup</span><span class="o">.</span><span class="n">greet</span><span class="o">())</span>
</span><span class='line'><span class="c1">// Prints &quot;Woof!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Array does not use subscript [ ]</h2>

<p>To access an array, you use ( ) instead of [ ]. It is not a matter of symbol choice. Scala uses ( ) because an array is an object with methods.</p>

<p>To access the 4th element of an array, you write</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">myArray</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Behind the scene, it is in fact calling a method <code>apply</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">myArray</span><span class="o">.</span><span class="n">apply</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, for setting an array element, you write</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">myArray</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is interpreted as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">myArray</span><span class="o">.</span><span class="n">update</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Functions are first class constructs</h2>

<p>Java is <em>imperative</em> style. Scala is <em>imperative</em>, but excels in <em>functional</em> style too.</p>

<p>Being a functional language, functions are first class constructs. We use an example of printing <code>args</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">arg</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">arg</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>foreach</code> is being passed a function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">arg</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">arg</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above function has a few characteristics:</p>

<ul>
<li>It is an anonymous function (has no name)</li>
<li>It get passed a single parameter named <code>arg</code> and the type is being inferred by compiler</li>
<li>The main code is simply the <code>println</code></li>
<li>Yeah, <code>=&gt;</code> is used, also call a right arrow</li>
</ul>


<p>A more complete example of an anonymous method with explicit parameter type</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// More code</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we said, functions are first class constructs, so you basically could assign it to a variable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">add</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// More code</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then use it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">add</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'><span class="c1">// returns 5</span>
</span></code></pre></td></tr></table></div></figure>


<h2>for arg in args</h2>

<p>This is how you use <code>for (arg in args)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">arg</span> <span class="k">&lt;-</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="n">arg</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some characteristics:</p>

<ul>
<li>For each element in <code>args</code>, it is assigned to <code>arg</code> using <code>val (not</code>var`, so you can re-assign)</li>
<li>Yeah, it is using a <code>&lt;-</code>, which you can interpret as &#8216;in&#8217;</li>
<li>It is not a <code>&lt;=</code> because that would mean less-than-or-equal</li>
</ul>


<h2>Array, List, and Tuple</h2>

<p>Much about immutability from Java is different in Scala.</p>

<ul>
<li>Array is mutable</li>
<li>List is immutable</li>
<li>Tuple is immutable, and can contain different types</li>
</ul>


<p>You can read more about <a href="http://www.scala-lang.org/api/current/scala/Array.html">Array</a> and <a href="http://www.scala-lang.org/api/current/scala/collection/immutable/List.html">List</a>.</p>

<p>However, I would want to point out about Tuple, as that is never heard of in Java. In Java, when you want to return multiple objects, you will probably create a POJO (plain old java object) to contain the multiple objects. Using tuple, you can avoid POJO like classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">color</span> <span class="k">=</span> <span class="o">(</span><span class="s">&quot;blue&quot;</span><span class="o">,</span> <span class="mi">258</span><span class="o">,</span> <span class="-Symbol">&#39;b</span><span class="err">&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then access the tuple using a dot, underscore, and the one-based index of the element.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">color</span><span class="o">.</span><span class="n">_1</span><span class="o">)</span>
</span><span class='line'><span class="c1">// Prints blue</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Set and Map</h2>

<p>The way immutability works for Set and Map is different.</p>

<p>To use a mutable Set, you import the mutable HashSet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.HashSet</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">colorSet</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'><span class="n">colorSet</span> <span class="o">+=</span> <span class="s">&quot;blue&quot;</span>
</span><span class='line'><span class="n">colorSet</span> <span class="o">+=</span> <span class="o">(</span><span class="s">&quot;red&quot;</span><span class="o">,</span> <span class="s">&quot;green&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use an immutable Set, you import the <em>immutable version</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.collection.immutable.HashSet</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">colorSet</span> <span class="k">=</span> <span class="nc">HashSet</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="s">&quot;blue&quot;</span><span class="o">,</span> <span class="s">&quot;red&quot;</span><span class="o">,</span> <span class="s">&quot;green&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly for map, there is a mutable and immutable version. Let&#8217;s take a look at just the mutable HashMap.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.HashMap</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">colorMap</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span><span class="o">]</span>
</span><span class='line'><span class="n">colorMap</span> <span class="o">+=</span> <span class="mi">1</span> <span class="o">-&gt;</span> <span class="s">&quot;Blue&quot;</span>
</span><span class='line'><span class="n">colorMap</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">-&gt;</span> <span class="s">&quot;Red&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The expression <code>1 -&gt; "Blue"</code> means <code>1.-&gt;("Blue")</code>. The method <code>-&gt;</code> is available for any object in Scala, and it returns a 2-element tuple. So basically a 2-element tuple of (Int, String) is added to colorMap.</p>

<p>You might think the equivalent is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">colorMap</span> <span class="o">+=</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;Blue&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, that would not work as <code>+=</code> method will interpret as you want to add 2 elements - a Int and a String - where in fact you want to add a tuple (Int, String). Hence you need to add ( ) for the tuple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">colorMap</span> <span class="o">+=</span> <span class="o">((</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;Blue&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also create Map with a shorthand</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="mi">1</span> <span class="o">-&gt;</span> <span class="s">&quot;Blue&quot;</span><span class="o">,</span> <span class="mi">2</span> <span class="o">-&gt;</span> <span class="s">&quot;Red&quot;</span><span class="o">,</span> <span class="mi">3</span> <span class="o">-&gt;</span> <span class="s">&quot;Green&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again, that&#8217;s same as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;Blue&quot;</span><span class="o">),</span> <span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&quot;Red&quot;</span><span class="o">),</span> <span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&quot;Green&quot;</span><span class="o">)</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup GHUnit with CocoaPods]]></title>
    <link href="http://samwize.github.com/2012/10/04/how-to-setup-ghunit-with-cocoapods/"/>
    <updated>2012-10-04T23:21:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/04/how-to-setup-ghunit-with-cocoapods</id>
    <content type="html"><![CDATA[<p>The <a href="http://gabriel.github.com/gh-unit/docs/appledoc_include/guide_install_ios_4.html">installation guide for GHUnit</a> is for installing the framework in the traditional way.</p>

<p>As you might know, <a href="http://cocoapods.org/">CocoaPods</a> is the new way to handle dependencies. Of course, GHUnit is supported.</p>

<p>The is a lack of a guide on how you setup the two useful iOS libraries together.</p>

<!-- more -->


<p>It is similar to the <a href="http://gabriel.github.com/gh-unit/docs/appledoc_include/guide_install_ios_4.html">official guide</a>. I am going to point out the differences when need to.</p>

<h2>Step 1 - Create Test Target</h2>

<p>This is the same. You create a completely new application target.</p>

<p>I prefer to name it <code>AppGHTests</code>, as I might still be using <code>AppTests</code> for my <a href="http://samwize.github.com/2012/10/03/sentestingkit-does-not-support-wait-for-blocks">SenTestings</a>.</p>

<p><img class="center" src="http://samwize.github.com/images/xcode-ghunit-pods-new-target.png"></p>

<h2>Step 2 - Configure Test Target</h2>

<p>You DON&#8217;T have to download and copy <code>GHUnitIOS.framework</code> to your project since you are using CocoaPods. Instead, you should setup GHUnit pods.</p>

<p>Edit the <code>Prodfile</code> and add GHUnitIOS.</p>

<pre><code>platform :ios
pod 'GHUnitIOS', '0.5.5'
</code></pre>

<p>Then install the pod as per normal.</p>

<pre><code>$ pod install
</code></pre>

<p>Continue with the official guide to remove the unnecessary files, and edit <code>main.m</code> to replace the delegate class with <code>GHUnitIOSAppDelegate</code>.</p>

<h2>Step 3 - Configure Pod for Test Target</h2>

<p>This part is IMPORTANT. The new test target will not include the pods.</p>

<p>You need to configure the target to be based on Pods project. Refer to <a href="http://samwize.com/2012/10/01/unit-tests-with-cocoapods/">this post</a>.</p>

<p>Lastly, add the <code>libPods.a</code> library to the test target.</p>

<p><img class="center" src="http://samwize.github.com/images/xcode-ghunit-pods-libpods.png"></p>

<p>That&#8217;s it. Run the test target!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SenTestingKit does not support wait for blocks]]></title>
    <link href="http://samwize.github.com/2012/10/03/sentestingkit-does-not-support-wait-for-blocks/"/>
    <updated>2012-10-03T00:21:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/03/sentestingkit-does-not-support-wait-for-blocks</id>
    <content type="html"><![CDATA[<p>I was using <a href="http://developer.apple.com/library/mac/#documentation/developertools/Conceptual/UnitTesting/00-About_Unit_Testing/about.html">SenTestingKit</a>, the default unit testing framework from Apple, when I found out that it does not support tests that involve asynchronous methods, or blocks.</p>

<p>That&#8217;s a waste.</p>

<!-- more -->


<p>Though there is <a href="https://gist.github.com/2254570">a workaround</a> using semaphore.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testBlockMethod</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_semaphore_t</span> <span class="n">semaphore</span> <span class="o">=</span> <span class="n">dispatch_semaphore_create</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Your block method eg. AFNetworking</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://httpbin.org/ip&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="n">AFJSONRequestOperation</span> <span class="o">*</span><span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFJSONRequestOperation</span> <span class="nl">JSONRequestOperationWithRequest:</span><span class="n">request</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">,</span> <span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="kt">id</span> <span class="n">JSON</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;IP Address: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">JSON</span> <span class="nl">valueForKeyPath:</span><span class="s">@&quot;origin&quot;</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">STAssertNotNil</span><span class="p">(</span><span class="n">JSON</span><span class="p">,</span> <span class="s">@&quot;JSON not loaded&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// Signal that block has completed</span>
</span><span class='line'>        <span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">semaphore</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failure:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">operation</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Run loop</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">semaphore</span><span class="p">,</span> <span class="n">DISPATCH_TIME_NOW</span><span class="p">))</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">runMode:</span><span class="n">NSDefaultRunLoopMode</span>
</span><span class='line'>                                 <span class="nl">beforeDate:</span><span class="p">[</span><span class="n">NSDate</span> <span class="nl">dateWithTimeIntervalSinceNow:</span><span class="mi">10</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">dispatch_release</span><span class="p">(</span><span class="n">semaphore</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if you mind, there are lots of <a href="http://stackoverflow.com/questions/4114083/ios-tests-specs-tdd-bdd-and-integration-acceptance-testing">other testing frameworks</a>, eg <a href="https://github.com/gabriel/gh-unit">GHUnit</a> supports asynchronous testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Store Changes in iOS6]]></title>
    <link href="http://samwize.github.com/2012/10/02/app-store-changes-in-ios6/"/>
    <updated>2012-10-02T22:22:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/02/app-store-changes-in-ios6</id>
    <content type="html"><![CDATA[<p>iOS 6 has introduced a big change to how App Store works.</p>

<p>The changes <a href="http://www.gamezebo.com/news/2012/09/25/ios-6-app-store-and-what-it-means-developers">means a lot to developers</a>, and affects how developers would write their app descriptions, screenshots, etc.</p>

<p>Some of the changes are so breaking, that lightwoodgames said - <a href="http://www.lightwoodgames.com/blog/2012/09/everything-thats-wrong-with-the-app-store-in-ios-6/#.UGhVbaQe7UO">don&#8217;t just put up with this!</a>.</p>

<p>You could also refer to a <a href="http://www.apptamin.com/ASO_Cheat_Sheet-v2.pdf">simple cheatsheet</a>.</p>

<p>Here&#8217;s my short version of what you should take note of:</p>

<!-- more -->


<ol>
<li><p>First screenshot is very important</p></li>
<li><p>First 3 lines of description is still very prominent</p></li>
<li><p>Fill up What&#8217;s New section</p></li>
<li><p>Enter your App Support URL</p></li>
<li><p>Ask your users to &#8216;like&#8217; on Facebook</p></li>
</ol>


<p>And as always, search algorithm is forever changing. Use your keywords effectively. Use unique (and not generic) keywords. Use singular form.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Tests with CocoaPods]]></title>
    <link href="http://samwize.github.com/2012/10/01/unit-tests-with-cocoapods/"/>
    <updated>2012-10-01T23:41:00+08:00</updated>
    <id>http://samwize.github.com/2012/10/01/unit-tests-with-cocoapods</id>
    <content type="html"><![CDATA[<p><a href="http://cocoapods.org/">CocoaPods</a> is a tool for managing dependecies for iOS and Mac OS X projects.</p>

<p><a href="http://cocoapods.org/">Getting started</a> with using CocoaPods is easy. The tricky part is getting used to opening Xcode workspace (eg. <code>App.xcworkspace</code>) instead of Xocde project. But that&#8217;s not what I want to covered in this post.</p>

<p>One of the hurdle I encountered is getting unit testing to work after CocoaPods is setup.</p>

<!-- more -->


<p>Apparently, after you setup CocoaPods, it automatically configures your project&#8217;s main target to use the pods (dependecies). However, it does not configure the same for your unit tests target. So when you run your unit test, you will likely encounter errors like this:</p>

<pre><code>SomeLibrary.h not found
</code></pre>

<p>To fix, go to <strong>Project</strong> > <strong>Info</strong> > <strong>Configurations</strong> > change <code>Based on Configuration File</code> to <code>Pods</code>. Like this:</p>

<p><img class="center" src="http://samwize.github.com/images/cocoapods-unit-test-configure.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress would not deploy]]></title>
    <link href="http://samwize.github.com/2012/09/30/octopress-would-not-deploy/"/>
    <updated>2012-09-30T21:59:00+08:00</updated>
    <id>http://samwize.github.com/2012/09/30/octopress-would-not-deploy</id>
    <content type="html"><![CDATA[<p>I encountered a problem when I did a <code>rake deploy</code>. Somehow it does not get deployed.</p>

<p>The only error I got was:</p>

<pre><code>The following paths are ignored by one of your .gitignore files:
_deploy
</code></pre>

<!-- more -->


<p>That&#8217;s a strange error. And I verified the <code>public</code> and <code>_deploy</code> directories were generated correctly.</p>

<p>It turns out to be an issue when you clone the repos. You <a href="https://github.com/imathis/octopress/issues/412">must setup the Github pages</a> again.</p>

<pre><code>rake setup_github_pages 
</code></pre>

<p>Just that. Wasted a few hours. Hopes this help others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Singleton/SharedInstance Template for iOS 5 (ARC and GCD)]]></title>
    <link href="http://samwize.github.com/2012/09/29/singleton-slash-sharedinstance-template-for-ios-5-arc-and-gcd/"/>
    <updated>2012-09-29T19:35:00+08:00</updated>
    <id>http://samwize.github.com/2012/09/29/singleton-slash-sharedinstance-template-for-ios-5-arc-and-gcd</id>
    <content type="html"><![CDATA[<p>The singleton pattern is widely used in iOS to have a global, static class.</p>

<p>The most famous is <code>[NSUserDefaults standardUserDefaults]</code>.</p>

<p>Over the years, the template for creating a singleton/SharedInstance has also changed. This is due to the introduction of new technologies in Apple&#8217;s SDK, particularly ARC and GDC.</p>

<!-- more -->


<p>The <a href="http://lukeredpath.co.uk/blog/a-note-on-objective-c-singletons.html">implementation</a> has simplified to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">pred</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__strong</span> <span class="k">static</span> <span class="kt">id</span> <span class="n">_sharedObject</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pred</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">_sharedObject</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span> <span class="c1">// or some other init method</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_sharedObject</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice piece of code added to my Xcode snippet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API Design Rules for iOS/OS X]]></title>
    <link href="http://samwize.github.com/2012/09/28/api-design-rules-for-ios-slash-os-x/"/>
    <updated>2012-09-28T21:43:00+08:00</updated>
    <id>http://samwize.github.com/2012/09/28/api-design-rules-for-ios-slash-os-x</id>
    <content type="html"><![CDATA[<p>If you are designing an SDK/library/API, read these 25 rules by <a href="http://mattgemmell.com/2012/05/24/api-design/">Matt Gemmell</a>:</p>

<p><a href="http://mattgemmell.com/2012/05/24/api-design/"><img class="center" src="http://samwize.github.com/images/ios-api-design-rules.jpeg"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 4.5 Tips &amp; Tricks]]></title>
    <link href="http://samwize.github.com/2012/09/26/xcode-4-dot-5-tips-and-tricks/"/>
    <updated>2012-09-26T01:16:00+08:00</updated>
    <id>http://samwize.github.com/2012/09/26/xcode-4-dot-5-tips-and-tricks</id>
    <content type="html"><![CDATA[<p>Some of my favorite Xcode tips &amp; tricks (tested on Xcode 4.5).</p>

<h2>Shortcut</h2>

<p><img class="center" src="http://samwize.github.com/images/xcode-shortcuts.png" title="xcode shortcuts" ></p>

<!-- more -->


<h2>Catch All Exceptions</h2>

<ol>
<li>Bring up breakpoint navigator (⌘6)</li>
<li>Click + on the bottom left</li>
<li>Add Exception Breakpoint</li>
</ol>


<p><img class="center" src="http://samwize.github.com/images/xcode-catch-all-exceptions.png" title="xcode catch exceptions" ></p>

<p><em>Anyone knows the difference with <a href="http://blog.just2us.com/2012/02/find-the-real-exception-in-xcode-debugger/">symbolic breakpoint</a>?</em></p>

<h2>NSLog, Auto Continue on Breakpoints</h2>

<p>Breakpoints are so much powerful. Don&#8217;t limit to just pause on every breakpoint.</p>

<p>You could set actions such as log a message under certain condition, or automatically continue. Or if you are not interested in the first 10 times of a while loop, you can ignore x times before pause. Or even have your Mac speaks out instead of traditional text logging.</p>

<p>Edit a breakpoint for more options:</p>

<p><img class="center" src="http://samwize.github.com/images/xcode-nslog-on-breakpoints.png" title="breakpoints actions" ></p>

<h2>Use of Tabs</h2>

<ol>
<li>Create new tabs with ⌘T</li>
<li>Double click to edit tab name</li>
<li>My workflow uses these tabs: Project Resources, Design, Coding 1, Coding 2, Build</li>
</ol>


<p><img class="center" src="http://samwize.github.com/images/xcode-tabs-workflow.png" title="tabs for my workflow" ></p>

<p>It&#8217;s totally up to you to organize your tabs, just like web browsing.</p>

<h2>Use of Behaviours</h2>

<p>Behaviours are hooks to Xcode for events like build, test, run, and search. You can find them in <strong>Preferences</strong> > <strong>Behaviours</strong>.</p>

<p>These are my additional behaviours.</p>

<p>Show Build tab when there is new issue:</p>

<p><img class="center" src="http://samwize.github.com/images/xcode-behaviour-build-new-issues.png" title="'Show Build tab when there is new issue'" ></p>

<p>Show console when start running:</p>

<p><img class="center" src="http://samwize.github.com/images/xcode-behaviour-console.png" title="'Show console when start running'" ></p>

<p>Show Debug tab when paused:</p>

<p><img class="center" src="http://samwize.github.com/images/xcode-behaviour-debug-tab.png" title="'Show Debug tab when paused'" ></p>

<h2>More Reference</h2>

<ol>
<li><a href="http://developer.apple.com/videos/wwdc/2012/">WWDC 2012</a> - &#8220;Working Efficiently with Xcode&#8221; is an excellent introductory</li>
<li><a href="http://developer.apple.com/library/ios/#documentation/ToolsLanguages/Conceptual/Xcode4UserGuide/000-About_Xcode/about.html#//apple_ref/doc/uid/TP40010215-CH1-SW1">Xcode4 User Guide</a> - Complete, but way too much text</li>
<li><a href="http://blog.gomiso.com/2012/02/07/work-efficiently-with-xcode/">miso blog</a> - from a developer</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Table Stylesheet]]></title>
    <link href="http://samwize.github.com/2012/09/24/octopress-table-stylesheet/"/>
    <updated>2012-09-24T19:27:00+08:00</updated>
    <id>http://samwize.github.com/2012/09/24/octopress-table-stylesheet</id>
    <content type="html"><![CDATA[<p>Octopress has been very cool for the 2 weeks since I began using.</p>

<p>My first hiccup came when I tried using table in <a href="http://samwize.github.com/2012/09/21/i-bought-samwize-dot-com-for-99-cents/">this post</a>. Firstly, I have to figure out how to create table in Octopress. Yet after figuring out, the table doesn&#8217;t get displayed! It&#8217;s just not working.</p>

<!-- more -->


<h2>Usage</h2>

<p>The first problem is with understanding how to create table in Octopress. They didn&#8217;t really <a href="http://octopress.org/docs/">document</a> that, because they expect you to know <a href="http://daringfireball.net/projects/markdown/syntax#html">markdown inline HTML</a> can be used. That means writing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>Column1<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>Column2<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>foo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>foo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>    
</span></code></pre></td></tr></table></div></figure>


<p>However, that&#8217;s not really nice, and defeats the point of <em>not writing in HTML</em>.</p>

<p>Fortunately, you can do the same using extended markdown syntax like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>| Column1     | Column2      |
</span><span class='line'>| ----------- | ------------ |
</span><span class='line'>| foo         | foo
</span></code></pre></td></tr></table></div></figure>


<p>But that still does not work. You will not see the table borders..</p>

<p>I would say that&#8217;s a bug with Octopress.</p>

<h2>Table Stylesheet</h2>

<p>As I inspect the generated HTML, the table tags are present, and correct.</p>

<p>They are not showing because of the css stylesheet. <code>table</code>, <code>th</code> and <code>td</code> has <code>border-width</code> of ZERO! This <a href="http://programus.github.com/blog/2012/03/07/add-table-data-css-for-octopress/">post in chinese</a> provides a solution. Translated, it means:</p>

<h3>Step 1. Add data-table.css</h3>

<p>Add data-table.css to <code>source/stylesheets/</code>.</p>

<div><script src='https://gist.github.com/1993032.js?file=data-table.css'></script>
<noscript><pre><code>* + table {
  border-style:solid;
  border-width:1px;
  border-color:#e7e3e7;
}

* + table th, * + table td {
  border-style:dashed;
  border-width:1px;
  border-color:#e7e3e7;
  padding-left: 3px;
  padding-right: 3px;
}

* + table th {
  border-style:solid;
  font-weight:bold;
  background: url(&quot;/images/noise.png?1330434582&quot;) repeat scroll left top #F7F3F7;
}

* + table th[align=&quot;left&quot;], * + table td[align=&quot;left&quot;] {
  text-align:left;
}

* + table th[align=&quot;right&quot;], * + table td[align=&quot;right&quot;] {
  text-align:right;
}

* + table th[align=&quot;center&quot;], * + table td[align=&quot;center&quot;] {
  text-align:center;
}
</code></pre></noscript></div>


<h3>Step 2. Add link header</h3>

<p>In <code>source/_includes/head.html</code> insert this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;/stylesheets/data-table.css&quot;</span> <span class="na">media=</span><span class="s">&quot;screen, projection&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now the table appears!</p>

<p>PS: I am puzzled why Octopress does not ship with a default table stylesheet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I bought samwize.com for 99 cents]]></title>
    <link href="http://samwize.github.com/2012/09/21/i-bought-samwize-dot-com-for-99-cents/"/>
    <updated>2012-09-21T10:51:00+08:00</updated>
    <id>http://samwize.github.com/2012/09/21/i-bought-samwize-dot-com-for-99-cents</id>
    <content type="html"><![CDATA[<p>This blog is now given an official (domain) name since I <a href="http://samwize.github.com/2012/09/10/switched-from-wordpress-to-octopress/">switched to Octopress</a> 2 weeks ago.</p>

<p>The domain is bought from <a href="http://www.namecheap.com/">NameCheap</a> at 99 cents for first year, thereafter $10.69/yr. This is a special promo given after they won the best registrar from lifehackers. (promo code <strong>WELOVEU</strong>)</p>

<p>Wonder how I host this blog?</p>

<!-- more -->


<h2>Host blog on Github Pages</h2>

<p>The blogging framework is using Octopress, and the baked webpages are hosted using <a href="http://samwize.github.com/2012/09/11/how-to-setup-octopress-on-github-pages/">Github Pages</a> (Free!).</p>

<p>To use my custom domain, I added <code>samwize.com</code> to the file <code>/source/CNAME</code> in Octopress.</p>

<p>Since I am now using a top-level domain, I have to add an A record pointing to <code>204.232.175.78</code>. I also redirect <a href="http://www.samwize.com">www.samwize.com</a> to <a href="http://samwize.com">samwize.com</a>. My Namecheap host records looks like this:</p>

<table>
<thead>
<tr>
<th></th>
<th> HOST NAME   </th>
<th> IP ADDRESS/URL    </th>
<th> RECORD TYPE       </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> @           </td>
<td> 204.232.175.78    </td>
<td> A (Address)       </td>
</tr>
<tr>
<td></td>
<td> www         </td>
<td> samwize.com.      </td>
<td> CNAME (Alias)     </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to write Getter/Setter for static variables]]></title>
    <link href="http://samwize.github.com/2012/09/20/how-to-write-getter-slash-setter-for-static-variables/"/>
    <updated>2012-09-20T14:14:00+08:00</updated>
    <id>http://samwize.github.com/2012/09/20/how-to-write-getter-slash-setter-for-static-variables</id>
    <content type="html"><![CDATA[<p>In the last post, I blogged about how you should write <a href="http://samwize.github.com/2012/09/19/how-you-should-write-getter-slash-setter-for-python/">Getter/Setter for member variables</a>.</p>

<p>This is a follow-up for <strong>static variables</strong>, instead of instance variables.</p>

<!-- more -->


<p>I didn&#8217;t know the answer to that, until I searched around <a href="http://stackoverflow.com/questions/128573/using-property-on-classmethods">Stackoverflow</a>. There are a couple of ways around using @property on classmethods.</p>

<p>The best answer for me is this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="n">_foo</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">__metaclass__</span><span class="p">(</span><span class="nb">type</span><span class="p">):</span>
</span><span class='line'>        <span class="nd">@property</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">cls</span><span class="o">.</span><span class="n">_foo</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@foo.setter</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>                <span class="n">cls</span><span class="o">.</span><span class="n">_foo</span> <span class="o">=</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>It uses <code>__metaclass__</code>, some kind of <a href="http://www.voidspace.org.uk/python/articles/five-minutes.shtml">black magic</a> in Python.</p>

<p>With that, you can use the getter/setter on the static variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">MyClass</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">MyClass</span><span class="o">.</span><span class="n">foo</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">MyClass</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Non-ASCII Character in Python File]]></title>
    <link href="http://samwize.github.com/2012/09/18/non-ascii-character-in-python-file/"/>
    <updated>2012-09-18T18:00:00+08:00</updated>
    <id>http://samwize.github.com/2012/09/18/non-ascii-character-in-python-file</id>
    <content type="html"><![CDATA[<p>If you have non-ASCII characters eg. chinese in your python source code, you would encounter the following error:</p>

<pre><code>Python Error: Non-ASCII character in file but no encoding declared
</code></pre>

<p>Python by default does not allow Non-ASCII characters in the file. You have to insert the following at the top of the Python file.</p>

<pre><code>#!/usr/bin/env python
# -*- coding: utf8 -*- 
</code></pre>

<p>This works on a <a href="http://www.python.org/dev/peps/pep-0263/">per file basis</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paros - a mitmproxy with GUI for sniffing HTTP traffic]]></title>
    <link href="http://samwize.github.com/2012/09/15/paros-a-mitmproxy-with-gui-for-sniffing-http-traffic/"/>
    <updated>2012-09-15T01:47:00+08:00</updated>
    <id>http://samwize.github.com/2012/09/15/paros-a-mitmproxy-with-gui-for-sniffing-http-traffic</id>
    <content type="html"><![CDATA[<p>I introduced <a href="http://blog.just2us.com/2012/05/sniff-iphone-http-traffic-using-mitmproxy/">mitmproxy for sniffing iPhone HTTP traffic</a> back at <a href="http://just2us.com">just2us.com</a>.</p>

<p><a href="http://mitmproxy.org/">mitmproxy</a> is awesome, except that it isn&#8217;t very user friendly, as it is a text console interface. Many times, I have to figure what are the keys to move around or access certain function.</p>

<p>That&#8217;s where <a href="http://www.parosproxy.org/">Paros</a> shines.</p>

<p>This is how you setup up Paros to sniff iPhone HTTP Traffic:</p>

<!-- more -->


<h2>1. Install Paros</h2>

<p>Paros runs on Java. <a href="http://www.parosproxy.org/download.shtml">Download</a> for <a href="http://www.parosproxy.org/install.shtml">install</a>.</p>

<p>For Mac, download the Linux version.</p>

<p>Unzip and run <code>paros.jar</code>.</p>

<h2>2. Find out your machine IP</h2>

<p>Find out the local IP for your machine. You need this for the next step.</p>

<p>For Mac, run the command <code>ifconfig en1</code> and copy down the IP.</p>

<h2>3. Setup your iPhone proxy</h2>

<p>Make sure your iPhone is on the same network as the machine running Paros. eg. connect to the same Wifi</p>

<p>On your iPhone, open <strong>General</strong> > <strong>Wi-Fi</strong> > Go to details for your Wifi network.</p>

<p>From there, choose <strong>Manual</strong> for <strong>HTTP Proxy</strong>. Enter the <strong>machine IP</strong> for Server and <strong>8080</strong> for Port.</p>

<p><img class="center" src="http://samwize.github.com/images/iphone-http-proxy-paros.png" width="360" title="iPhone network settings" ></p>

<p>In the screenshot above, my machine IP is 192.168.1.68.</p>

<h2>4. Start running your target app and sniff</h2>

<p>Use your iPhone to run the app that you want to sniff the traffic.</p>

<p>Paros interface will immediately show the URL sites the app connects to. The interface is pretty self explanatory so I won&#8217;t go on from here.</p>

<p>Rock on from there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding and Using Custom Font in iOS]]></title>
    <link href="http://samwize.github.com/2012/09/14/adding-and-using-custom-font-in-ios/"/>
    <updated>2012-09-14T00:13:00+08:00</updated>
    <id>http://samwize.github.com/2012/09/14/adding-and-using-custom-font-in-ios</id>
    <content type="html"><![CDATA[<p>Custom font can be easily added and used in iOS 3.2 or above. Yet it is a very popular <a href="http://stackoverflow.com/questions/360751/can-i-embed-a-custom-font-in-an-iphone-application">question</a> on for iOS Developers.</p>

<p>Here are the steps:</p>

<!-- more -->


<ol>
<li><p>Add the otf/ttf font into your Resources folder. The name of my font is <strong>BentonSansComp-Book.otf</strong></p></li>
<li><p>Edit <strong>info.plist</strong> and add a key call <code>UIAppFonts</code> - value type should be <code>Array</code>. The friendly name for <code>UIAppFonts</code> is <code>Fonts provided by application</code>.</p></li>
<li><p>In <code>item0</code> of the array enter the name of the font you added &#8211; in my case, <strong>BentonSansComp-Book.otf</strong></p></li>
<li><p>Find the font name.</p>

<p> IMPORTANT: The font name is not necessary the filename. Open with <strong>Font Book.app</strong> > <strong>Show font info</strong> > look for <strong>PostScript name</strong>. That&#8217;s the font name you should use. For my font, it happens that the filename == font name.</p></li>
<li><p>Unfortunately, Xcode interface builder does not let you change to your custom font. So you got to code it!</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">myLabelView</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="s">@&quot;BentonSansComp-Book&quot;</span> <span class="nl">size:</span><span class="mi">16</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
